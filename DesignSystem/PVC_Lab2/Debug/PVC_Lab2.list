
PVC_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b4c  08004b4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b54  08004b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000108  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b712  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f94  00000000  00000000  0002b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  0002e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237a6  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd1d  00000000  00000000  000520d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d345f  00000000  00000000  0005ddf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131252  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f20  00000000  00000000  001312a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004958 	.word	0x08004958

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004958 	.word	0x08004958

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <MX_CAN2_Init+0x60>)
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <MX_CAN2_Init+0x64>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_CAN2_Init+0x60>)
 80005d0:	2210      	movs	r2, #16
 80005d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_CAN2_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_CAN2_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_CAN2_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_CAN2_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_CAN2_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_CAN2_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_CAN2_Init+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_CAN2_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_CAN2_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_CAN2_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_CAN2_Init+0x60>)
 8000612:	f000 ff77 	bl	8001504 <HAL_CAN_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 fd22 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40006800 	.word	0x40006800

0800062c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <HAL_CAN_MspInit+0xa0>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d13a      	bne.n	80006c4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000658:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_CAN_MspInit+0xa4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006b4:	2309      	movs	r3, #9
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_CAN_MspInit+0xa8>)
 80006c0:	f001 f9c0 	bl	8001a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40006800 	.word	0x40006800
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_GPIO_Init+0xd4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <MX_GPIO_Init+0xd4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xd4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_GPIO_Init+0xd4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <MX_GPIO_Init+0xd4>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xd8>)
 8000766:	f001 fb31 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000780:	f001 f960 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000784:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xd8>)
 800079e:	f001 f951 	bl	8001a44 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40020800 	.word	0x40020800

080007b8 <Check_Button>:

uint8_t count_new_mode = 0;



void Check_Button(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 80007be:	f000 fe95 	bl	80014ec <HAL_GetTick>
 80007c2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) != isButtonEnabled) {
 80007c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c8:	481f      	ldr	r0, [pc, #124]	; (8000848 <Check_Button+0x90>)
 80007ca:	f001 fae7 	bl	8001d9c <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <Check_Button+0x94>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d00f      	beq.n	80007fa <Check_Button+0x42>
		isButtonEnabled = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80007da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007de:	481a      	ldr	r0, [pc, #104]	; (8000848 <Check_Button+0x90>)
 80007e0:	f001 fadc 	bl	8001d9c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <Check_Button+0x94>)
 80007ea:	701a      	strb	r2, [r3, #0]
		last_button_press_time = current_time;
 80007ec:	4a18      	ldr	r2, [pc, #96]	; (8000850 <Check_Button+0x98>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
		didUpdatedAtThatTime = 0;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <Check_Button+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		if (current_time - last_button_press_time > debounce_delay && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) && didUpdatedAtThatTime == 0) {
			sparkling_mode = (sparkling_mode + 1) % 8;
			didUpdatedAtThatTime = 1;
		}
	}
}
 80007f8:	e022      	b.n	8000840 <Check_Button+0x88>
		if (current_time - last_button_press_time > debounce_delay && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) && didUpdatedAtThatTime == 0) {
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <Check_Button+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	220a      	movs	r2, #10
 8000804:	4293      	cmp	r3, r2
 8000806:	d91b      	bls.n	8000840 <Check_Button+0x88>
 8000808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <Check_Button+0x90>)
 800080e:	f001 fac5 	bl	8001d9c <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d013      	beq.n	8000840 <Check_Button+0x88>
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <Check_Button+0x9c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <Check_Button+0x88>
			sparkling_mode = (sparkling_mode + 1) % 8;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <Check_Button+0xa0>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	425a      	negs	r2, r3
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	f002 0207 	and.w	r2, r2, #7
 8000830:	bf58      	it	pl
 8000832:	4253      	negpl	r3, r2
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <Check_Button+0xa0>)
 8000838:	701a      	strb	r2, [r3, #0]
			didUpdatedAtThatTime = 1;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <Check_Button+0x9c>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40020800 	.word	0x40020800
 800084c:	200000b8 	.word	0x200000b8
 8000850:	200000b4 	.word	0x200000b4
 8000854:	200000b9 	.word	0x200000b9
 8000858:	200000ba 	.word	0x200000ba

0800085c <Spark>:

void Spark(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8000862:	f000 fe43 	bl	80014ec <HAL_GetTick>
 8000866:	6078      	str	r0, [r7, #4]

	if (sparkling_mode == 0) {
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <Spark+0xa4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <Spark+0x18>
		mode_0();
 8000870:	f000 f8fc 	bl	8000a6c <mode_0>
	}
	if (sparkling_mode == 1) {
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <Spark+0xa4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d102      	bne.n	8000882 <Spark+0x26>
		mode_1(current_time);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f90d 	bl	8000a9c <mode_1>
	}
	if (sparkling_mode == 2) {
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <Spark+0xa4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d102      	bne.n	8000890 <Spark+0x34>
		mode_2(current_time);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f952 	bl	8000b34 <mode_2>
	}
	if (sparkling_mode == 3) {
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <Spark+0xa4>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d102      	bne.n	800089e <Spark+0x42>
		mode_3(current_time);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f997 	bl	8000bcc <mode_3>
	}
	if (sparkling_mode == 4) {
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <Spark+0xa4>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d106      	bne.n	80008b4 <Spark+0x58>
		mode(current_time, spark_order_5, sparkling_delay_5);
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <Spark+0xa8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4916      	ldr	r1, [pc, #88]	; (8000908 <Spark+0xac>)
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f838 	bl	8000924 <mode>
	}
	if (sparkling_mode == 5) {
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <Spark+0xa4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d106      	bne.n	80008ca <Spark+0x6e>
		mode(current_time, spark_order_6, sparkling_delay_6);
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <Spark+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4913      	ldr	r1, [pc, #76]	; (8000910 <Spark+0xb4>)
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 f82d 	bl	8000924 <mode>
	}
	if (sparkling_mode == 6) {
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <Spark+0xa4>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d106      	bne.n	80008e0 <Spark+0x84>
		mode(current_time, spark_order_7, sparkling_delay_7);
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <Spark+0xb8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	490f      	ldr	r1, [pc, #60]	; (8000918 <Spark+0xbc>)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f822 	bl	8000924 <mode>
	}
	if (sparkling_mode == 7) {
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <Spark+0xa4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b07      	cmp	r3, #7
 80008e6:	d106      	bne.n	80008f6 <Spark+0x9a>
		mode(current_time, spark_order_8, sparkling_delay_8);
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <Spark+0xc0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	490c      	ldr	r1, [pc, #48]	; (8000920 <Spark+0xc4>)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f817 	bl	8000924 <mode>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000ba 	.word	0x200000ba
 8000904:	200000e4 	.word	0x200000e4
 8000908:	200000d8 	.word	0x200000d8
 800090c:	200000f4 	.word	0x200000f4
 8000910:	200000e8 	.word	0x200000e8
 8000914:	20000104 	.word	0x20000104
 8000918:	200000f8 	.word	0x200000f8
 800091c:	20000114 	.word	0x20000114
 8000920:	20000108 	.word	0x20000108

08000924 <mode>:

void mode(uint32_t current_time, char *order, uint32_t delay) {
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000936:	484a      	ldr	r0, [pc, #296]	; (8000a60 <mode+0x13c>)
 8000938:	f001 fa48 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000942:	4847      	ldr	r0, [pc, #284]	; (8000a60 <mode+0x13c>)
 8000944:	f001 fa42 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4844      	ldr	r0, [pc, #272]	; (8000a60 <mode+0x13c>)
 8000950:	f001 fa3c 	bl	8001dcc <HAL_GPIO_WritePin>


	if (current_time - last_sparking_time_0 > delay){
 8000954:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <mode+0x140>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d212      	bcs.n	8000988 <mode+0x64>
		sparkMode_0 = (sparkMode_0 + 1) % strlen(order);
 8000962:	4b41      	ldr	r3, [pc, #260]	; (8000a68 <mode+0x144>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	461c      	mov	r4, r3
 800096a:	68b8      	ldr	r0, [r7, #8]
 800096c:	f7ff fc4a 	bl	8000204 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	fbb4 f2f3 	udiv	r2, r4, r3
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	1ae3      	subs	r3, r4, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b3a      	ldr	r3, [pc, #232]	; (8000a68 <mode+0x144>)
 8000980:	701a      	strb	r2, [r3, #0]
		last_sparking_time_0 = current_time;
 8000982:	4a38      	ldr	r2, [pc, #224]	; (8000a64 <mode+0x140>)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6013      	str	r3, [r2, #0]
	}


	if (order[sparkMode_0] == 'g') {
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <mode+0x144>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b67      	cmp	r3, #103	; 0x67
 8000996:	d111      	bne.n	80009bc <mode+0x98>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099e:	4830      	ldr	r0, [pc, #192]	; (8000a60 <mode+0x13c>)
 80009a0:	f001 fa14 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009aa:	482d      	ldr	r0, [pc, #180]	; (8000a60 <mode+0x13c>)
 80009ac:	f001 fa0e 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	482a      	ldr	r0, [pc, #168]	; (8000a60 <mode+0x13c>)
 80009b8:	f001 fa08 	bl	8001dcc <HAL_GPIO_WritePin>
	}
	if (order[sparkMode_0] == 'y') {
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <mode+0x144>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b79      	cmp	r3, #121	; 0x79
 80009ca:	d111      	bne.n	80009f0 <mode+0xcc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4823      	ldr	r0, [pc, #140]	; (8000a60 <mode+0x13c>)
 80009d4:	f001 f9fa 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <mode+0x13c>)
 80009e0:	f001 f9f4 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	481d      	ldr	r0, [pc, #116]	; (8000a60 <mode+0x13c>)
 80009ec:	f001 f9ee 	bl	8001dcc <HAL_GPIO_WritePin>
	}
	if (order[sparkMode_0] == 'r') {
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <mode+0x144>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b72      	cmp	r3, #114	; 0x72
 80009fe:	d111      	bne.n	8000a24 <mode+0x100>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a06:	4816      	ldr	r0, [pc, #88]	; (8000a60 <mode+0x13c>)
 8000a08:	f001 f9e0 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <mode+0x13c>)
 8000a14:	f001 f9da 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <mode+0x13c>)
 8000a20:	f001 f9d4 	bl	8001dcc <HAL_GPIO_WritePin>
	}
	if (order[sparkMode_0] == 'n') {
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <mode+0x144>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b6e      	cmp	r3, #110	; 0x6e
 8000a32:	d111      	bne.n	8000a58 <mode+0x134>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <mode+0x13c>)
 8000a3c:	f001 f9c6 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <mode+0x13c>)
 8000a48:	f001 f9c0 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <mode+0x13c>)
 8000a54:	f001 f9ba 	bl	8001dcc <HAL_GPIO_WritePin>
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	200000d4 	.word	0x200000d4
 8000a68:	200000d1 	.word	0x200000d1

08000a6c <mode_0>:

void mode_0(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <mode_0+0x2c>)
 8000a78:	f001 f9a8 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <mode_0+0x2c>)
 8000a84:	f001 f9a2 	bl	8001dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <mode_0+0x2c>)
 8000a90:	f001 f99c 	bl	8001dcc <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <mode_1>:

void mode_1(uint32_t current_time) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if (current_time - last_sparking_time_1 > sparkling_delay_1){
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <mode_1+0x8c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2232      	movs	r2, #50	; 0x32
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d90d      	bls.n	8000ace <mode_1+0x32>
		sparkMode_1 = (sparkMode_1 + 1) % 2;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <mode_1+0x90>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	bfb8      	it	lt
 8000ac0:	425b      	neglt	r3, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <mode_1+0x90>)
 8000ac6:	701a      	strb	r2, [r3, #0]
		last_sparking_time_1 = current_time;
 8000ac8:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <mode_1+0x8c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	}

	if (sparkMode_1) {
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <mode_1+0x90>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d012      	beq.n	8000afc <mode_1+0x60>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000adc:	4814      	ldr	r0, [pc, #80]	; (8000b30 <mode_1+0x94>)
 8000ade:	f001 f975 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <mode_1+0x94>)
 8000aea:	f001 f96f 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	480e      	ldr	r0, [pc, #56]	; (8000b30 <mode_1+0x94>)
 8000af6:	f001 f969 	bl	8001dcc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
}
 8000afa:	e011      	b.n	8000b20 <mode_1+0x84>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <mode_1+0x94>)
 8000b04:	f001 f962 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <mode_1+0x94>)
 8000b10:	f001 f95c 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <mode_1+0x94>)
 8000b1c:	f001 f956 	bl	8001dcc <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000bc 	.word	0x200000bc
 8000b2c:	200000c0 	.word	0x200000c0
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <mode_2>:


void mode_2(uint32_t current_time) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if (current_time - last_sparking_time_2 > sparkling_delay_2){
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <mode_2+0x8c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	22c8      	movs	r2, #200	; 0xc8
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d90d      	bls.n	8000b66 <mode_2+0x32>
		sparkMode_2 = (sparkMode_2 + 1) % 2;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <mode_2+0x90>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	bfb8      	it	lt
 8000b58:	425b      	neglt	r3, r3
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <mode_2+0x90>)
 8000b5e:	701a      	strb	r2, [r3, #0]
		last_sparking_time_2 = current_time;
 8000b60:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <mode_2+0x8c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
	}

	if (sparkMode_2) {
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <mode_2+0x90>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d012      	beq.n	8000b94 <mode_2+0x60>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <mode_2+0x94>)
 8000b76:	f001 f929 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <mode_2+0x94>)
 8000b82:	f001 f923 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b8c:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <mode_2+0x94>)
 8000b8e:	f001 f91d 	bl	8001dcc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
}
 8000b92:	e011      	b.n	8000bb8 <mode_2+0x84>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <mode_2+0x94>)
 8000b9c:	f001 f916 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <mode_2+0x94>)
 8000ba8:	f001 f910 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <mode_2+0x94>)
 8000bb4:	f001 f90a 	bl	8001dcc <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000c4 	.word	0x200000c4
 8000bc4:	200000c8 	.word	0x200000c8
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <mode_3>:

void mode_3(uint32_t current_time) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if (current_time - last_sparking_time_3 > sparkling_delay_3){
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <mode_3+0x90>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d90d      	bls.n	8000c00 <mode_3+0x34>
		sparkMode_3 = (sparkMode_3 + 1) % 2;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <mode_3+0x94>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	bfb8      	it	lt
 8000bf2:	425b      	neglt	r3, r3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <mode_3+0x94>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		last_sparking_time_3 = current_time;
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <mode_3+0x90>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
	}

	if (sparkMode_3) {
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <mode_3+0x94>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d012      	beq.n	8000c2e <mode_3+0x62>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0e:	4815      	ldr	r0, [pc, #84]	; (8000c64 <mode_3+0x98>)
 8000c10:	f001 f8dc 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <mode_3+0x98>)
 8000c1c:	f001 f8d6 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <mode_3+0x98>)
 8000c28:	f001 f8d0 	bl	8001dcc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8000c2c:	e011      	b.n	8000c52 <mode_3+0x86>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <mode_3+0x98>)
 8000c36:	f001 f8c9 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c40:	4808      	ldr	r0, [pc, #32]	; (8000c64 <mode_3+0x98>)
 8000c42:	f001 f8c3 	bl	8001dcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <mode_3+0x98>)
 8000c4e:	f001 f8bd 	bl	8001dcc <HAL_GPIO_WritePin>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000cc 	.word	0x200000cc
 8000c60:	200000d0 	.word	0x200000d0
 8000c64:	40020c00 	.word	0x40020c00

08000c68 <setmode>:

void setmode(char *order, uint32_t delay) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	count_new_mode = (count_new_mode + 1) % 4;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <setmode+0x84>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	425a      	negs	r2, r3
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	f002 0203 	and.w	r2, r2, #3
 8000c82:	bf58      	it	pl
 8000c84:	4253      	negpl	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <setmode+0x84>)
 8000c8a:	701a      	strb	r2, [r3, #0]

	if (count_new_mode == 1) {
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <setmode+0x84>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d106      	bne.n	8000ca2 <setmode+0x3a>
		strcpy(spark_order_5, order);
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <setmode+0x88>)
 8000c98:	f002 fe00 	bl	800389c <strcpy>
		sparkling_delay_5 = delay;
 8000c9c:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <setmode+0x8c>)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	6013      	str	r3, [r2, #0]
	}
	if (count_new_mode == 2) {
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <setmode+0x84>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d106      	bne.n	8000cb8 <setmode+0x50>
		strcpy(spark_order_6, order);
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <setmode+0x90>)
 8000cae:	f002 fdf5 	bl	800389c <strcpy>
		sparkling_delay_6 = delay;
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <setmode+0x94>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	6013      	str	r3, [r2, #0]
	}
	if (count_new_mode == 3) {
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <setmode+0x84>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d106      	bne.n	8000cce <setmode+0x66>
		strcpy(spark_order_7, order);
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <setmode+0x98>)
 8000cc4:	f002 fdea 	bl	800389c <strcpy>
		sparkling_delay_7 = delay;
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <setmode+0x9c>)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	6013      	str	r3, [r2, #0]
	}
	if (count_new_mode == 0) {
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <setmode+0x84>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d106      	bne.n	8000ce4 <setmode+0x7c>
		strcpy(spark_order_8, order);
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <setmode+0xa0>)
 8000cda:	f002 fddf 	bl	800389c <strcpy>
		sparkling_delay_8 = delay;
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <setmode+0xa4>)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	6013      	str	r3, [r2, #0]
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000118 	.word	0x20000118
 8000cf0:	200000d8 	.word	0x200000d8
 8000cf4:	200000e4 	.word	0x200000e4
 8000cf8:	200000e8 	.word	0x200000e8
 8000cfc:	200000f4 	.word	0x200000f4
 8000d00:	200000f8 	.word	0x200000f8
 8000d04:	20000104 	.word	0x20000104
 8000d08:	20000108 	.word	0x20000108
 8000d0c:	20000114 	.word	0x20000114

08000d10 <process_command>:

void process_command(char *cmd, int *index) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b098      	sub	sp, #96	; 0x60
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	//sprintf(cmd, "%s", cmd);
	HAL_UART_Transmit( &huart6, (uint8_t *) cmd, strlen(cmd), 10);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fa72 	bl	8000204 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	230a      	movs	r3, #10
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <process_command+0x1ac>)
 8000d2a:	f001 fd0e 	bl	800274a <HAL_UART_Transmit>
	HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);
 8000d2e:	230a      	movs	r3, #10
 8000d30:	2202      	movs	r2, #2
 8000d32:	4963      	ldr	r1, [pc, #396]	; (8000ec0 <process_command+0x1b0>)
 8000d34:	4861      	ldr	r0, [pc, #388]	; (8000ebc <process_command+0x1ac>)
 8000d36:	f001 fd08 	bl	800274a <HAL_UART_Transmit>

	char *command;
	command = strtok(cmd, " ");
 8000d3a:	4962      	ldr	r1, [pc, #392]	; (8000ec4 <process_command+0x1b4>)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fdb5 	bl	80038ac <strtok>
 8000d42:	4603      	mov	r3, r0
 8000d44:	65fb      	str	r3, [r7, #92]	; 0x5c
//	HAL_UART_Transmit( &huart6, (uint8_t *) command, strlen(command), 10);
//	HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);
	char *args;
	args= strtok(NULL, "");
 8000d46:	4960      	ldr	r1, [pc, #384]	; (8000ec8 <process_command+0x1b8>)
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f002 fdaf 	bl	80038ac <strtok>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
//	HAL_UART_Transmit( &huart6, (uint8_t *) args, strlen(args), 10);
//	HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);

	if (strcmp(command, "set")==0) {
 8000d52:	495e      	ldr	r1, [pc, #376]	; (8000ecc <process_command+0x1bc>)
 8000d54:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d56:	f7ff fa4b 	bl	80001f0 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14f      	bne.n	8000e00 <process_command+0xf0>
		if (strcmp(args, "1")==0) {
 8000d60:	495b      	ldr	r1, [pc, #364]	; (8000ed0 <process_command+0x1c0>)
 8000d62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000d64:	f7ff fa44 	bl	80001f0 <strcmp>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <process_command+0x64>
			sparkling_mode = 0;
 8000d6e:	4b59      	ldr	r3, [pc, #356]	; (8000ed4 <process_command+0x1c4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "2")==0) {
 8000d74:	4958      	ldr	r1, [pc, #352]	; (8000ed8 <process_command+0x1c8>)
 8000d76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000d78:	f7ff fa3a 	bl	80001f0 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <process_command+0x78>
			sparkling_mode = 1;
 8000d82:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <process_command+0x1c4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "3")==0) {
 8000d88:	4954      	ldr	r1, [pc, #336]	; (8000edc <process_command+0x1cc>)
 8000d8a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000d8c:	f7ff fa30 	bl	80001f0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <process_command+0x8c>
			sparkling_mode = 2;
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <process_command+0x1c4>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "4")==0) {
 8000d9c:	4950      	ldr	r1, [pc, #320]	; (8000ee0 <process_command+0x1d0>)
 8000d9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000da0:	f7ff fa26 	bl	80001f0 <strcmp>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <process_command+0xa0>
			sparkling_mode = 3;
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <process_command+0x1c4>)
 8000dac:	2203      	movs	r2, #3
 8000dae:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "5")==0) {
 8000db0:	494c      	ldr	r1, [pc, #304]	; (8000ee4 <process_command+0x1d4>)
 8000db2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000db4:	f7ff fa1c 	bl	80001f0 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <process_command+0xb4>
			sparkling_mode = 4;
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <process_command+0x1c4>)
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "6")==0) {
 8000dc4:	4948      	ldr	r1, [pc, #288]	; (8000ee8 <process_command+0x1d8>)
 8000dc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000dc8:	f7ff fa12 	bl	80001f0 <strcmp>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <process_command+0xc8>
			sparkling_mode = 5;
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <process_command+0x1c4>)
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "7")==0) {
 8000dd8:	4944      	ldr	r1, [pc, #272]	; (8000eec <process_command+0x1dc>)
 8000dda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000ddc:	f7ff fa08 	bl	80001f0 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <process_command+0xdc>
			sparkling_mode = 6;
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <process_command+0x1c4>)
 8000de8:	2206      	movs	r2, #6
 8000dea:	701a      	strb	r2, [r3, #0]
		}
		if (strcmp(args, "8")==0) {
 8000dec:	4940      	ldr	r1, [pc, #256]	; (8000ef0 <process_command+0x1e0>)
 8000dee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000df0:	f7ff f9fe 	bl	80001f0 <strcmp>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <process_command+0xf0>
			sparkling_mode = 7;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <process_command+0x1c4>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	701a      	strb	r2, [r3, #0]
		}

	}
	if (strcmp(command, "new")==0) {
 8000e00:	493c      	ldr	r1, [pc, #240]	; (8000ef4 <process_command+0x1e4>)
 8000e02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e04:	f7ff f9f4 	bl	80001f0 <strcmp>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d151      	bne.n	8000eb2 <process_command+0x1a2>
		char msg[] = "Please choose spark delay:\n1 - low(200)\n2 - medium(600)\n3 - high(1000)\n";
 8000e0e:	4a3a      	ldr	r2, [pc, #232]	; (8000ef8 <process_command+0x1e8>)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4611      	mov	r1, r2
 8000e16:	2248      	movs	r2, #72	; 0x48
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fd29 	bl	8003870 <memcpy>
		HAL_UART_Transmit( &huart6, (uint8_t *) msg, strlen(msg), 100);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9ee 	bl	8000204 <strlen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	f107 010c 	add.w	r1, r7, #12
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	4822      	ldr	r0, [pc, #136]	; (8000ebc <process_command+0x1ac>)
 8000e34:	f001 fc89 	bl	800274a <HAL_UART_Transmit>

		char index = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		while (index != '\r') {
 8000e3e:	e033      	b.n	8000ea8 <process_command+0x198>
			if( HAL_OK == HAL_UART_Receive( &huart6, (uint8_t *) &index, 1, 1 ) ) {
 8000e40:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8000e44:	2301      	movs	r3, #1
 8000e46:	2201      	movs	r2, #1
 8000e48:	481c      	ldr	r0, [pc, #112]	; (8000ebc <process_command+0x1ac>)
 8000e4a:	f001 fd10 	bl	800286e <HAL_UART_Receive>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d129      	bne.n	8000ea8 <process_command+0x198>
     			HAL_UART_Transmit( &huart6, (uint8_t *) &index, 1, 10 );
 8000e54:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8000e58:	230a      	movs	r3, #10
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4817      	ldr	r0, [pc, #92]	; (8000ebc <process_command+0x1ac>)
 8000e5e:	f001 fc74 	bl	800274a <HAL_UART_Transmit>
				HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);
 8000e62:	230a      	movs	r3, #10
 8000e64:	2202      	movs	r2, #2
 8000e66:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <process_command+0x1b0>)
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <process_command+0x1ac>)
 8000e6a:	f001 fc6e 	bl	800274a <HAL_UART_Transmit>
				if (index == '1') {
 8000e6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e72:	2b31      	cmp	r3, #49	; 0x31
 8000e74:	d104      	bne.n	8000e80 <process_command+0x170>
					setmode(args, sparkling_delay_low);
 8000e76:	23c8      	movs	r3, #200	; 0xc8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000e7c:	f7ff fef4 	bl	8000c68 <setmode>
				}
				if (index == '2') {
 8000e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e84:	2b32      	cmp	r3, #50	; 0x32
 8000e86:	d105      	bne.n	8000e94 <process_command+0x184>
					setmode(args, sparkling_delay_medium);
 8000e88:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000e90:	f7ff feea 	bl	8000c68 <setmode>
				}
				if (index == '3') {
 8000e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e98:	2b33      	cmp	r3, #51	; 0x33
 8000e9a:	d105      	bne.n	8000ea8 <process_command+0x198>
					setmode(args, sparkling_delay_high);
 8000e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000ea4:	f7ff fee0 	bl	8000c68 <setmode>
		while (index != '\r') {
 8000ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000eac:	2b0d      	cmp	r3, #13
 8000eae:	d1c7      	bne.n	8000e40 <process_command+0x130>
				}
			}
		}
	}
	return;
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
}
 8000eb4:	3760      	adds	r7, #96	; 0x60
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000120 	.word	0x20000120
 8000ec0:	08004970 	.word	0x08004970
 8000ec4:	08004974 	.word	0x08004974
 8000ec8:	08004978 	.word	0x08004978
 8000ecc:	0800497c 	.word	0x0800497c
 8000ed0:	08004980 	.word	0x08004980
 8000ed4:	200000ba 	.word	0x200000ba
 8000ed8:	08004984 	.word	0x08004984
 8000edc:	08004988 	.word	0x08004988
 8000ee0:	0800498c 	.word	0x0800498c
 8000ee4:	08004990 	.word	0x08004990
 8000ee8:	08004994 	.word	0x08004994
 8000eec:	08004998 	.word	0x08004998
 8000ef0:	0800499c 	.word	0x0800499c
 8000ef4:	080049a0 	.word	0x080049a0
 8000ef8:	080049a4 	.word	0x080049a4

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f000 fa8d 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f84d 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f7ff fbe5 	bl	80006d8 <MX_GPIO_Init>
  MX_CAN2_Init();
 8000f0e:	f7ff fb59 	bl	80005c4 <MX_CAN2_Init>
  MX_USART6_UART_Init();
 8000f12:	f000 f9e1 	bl	80012d8 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int index = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
//	  HAL_UART_Transmit( &huart6, (uint8_t *)s, sizeof( s ), 10);
//	  HAL_Delay( 1000 );

	  Check_Button();
 8000f1a:	f7ff fc4d 	bl	80007b8 <Check_Button>
	  Spark();
 8000f1e:	f7ff fc9d 	bl	800085c <Spark>

	  if( HAL_OK == HAL_UART_Receive( &huart6, (uint8_t *) &c, 1, 1 ) )
 8000f22:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000f26:	2301      	movs	r3, #1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	481c      	ldr	r0, [pc, #112]	; (8000f9c <main+0xa0>)
 8000f2c:	f001 fc9f 	bl	800286e <HAL_UART_Receive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f1      	bne.n	8000f1a <main+0x1e>
	  {
		  if (c == '\r') {
 8000f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f3a:	2b0d      	cmp	r3, #13
 8000f3c:	d119      	bne.n	8000f72 <main+0x76>

			  buffer[index] = '\0';
 8000f3e:	463a      	mov	r2, r7
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);
 8000f48:	230a      	movs	r3, #10
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4914      	ldr	r1, [pc, #80]	; (8000fa0 <main+0xa4>)
 8000f4e:	4813      	ldr	r0, [pc, #76]	; (8000f9c <main+0xa0>)
 8000f50:	f001 fbfb 	bl	800274a <HAL_UART_Transmit>
			  //HAL_UART_Transmit( &huart6, (uint8_t *) buffer, index, 10);
			  process_command(buffer, index);
 8000f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f56:	463b      	mov	r3, r7
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fed8 	bl	8000d10 <process_command>
			  //HAL_UART_Transmit( &huart6, (uint8_t *) "\r\n", 2, 10);
			  index = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
			  memset(buffer, '\0', sizeof(buffer));
 8000f64:	463b      	mov	r3, r7
 8000f66:	2220      	movs	r2, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fc8e 	bl	800388c <memset>
 8000f70:	e7d3      	b.n	8000f1a <main+0x1e>


		  } else if (c != '\n') {
 8000f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	d0cf      	beq.n	8000f1a <main+0x1e>
			  HAL_UART_Transmit( &huart6, (uint8_t *) &c, 1, 10 );
 8000f7a:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000f7e:	230a      	movs	r3, #10
 8000f80:	2201      	movs	r2, #1
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <main+0xa0>)
 8000f84:	f001 fbe1 	bl	800274a <HAL_UART_Transmit>
		  	  buffer[index++] = c;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	627a      	str	r2, [r7, #36]	; 0x24
 8000f8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f92:	3328      	adds	r3, #40	; 0x28
 8000f94:	443b      	add	r3, r7
 8000f96:	f803 2c28 	strb.w	r2, [r3, #-40]
	  Check_Button();
 8000f9a:	e7be      	b.n	8000f1a <main+0x1e>
 8000f9c:	20000120 	.word	0x20000120
 8000fa0:	08004970 	.word	0x08004970

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fc6a 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <SystemClock_Config+0xb8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a22      	ldr	r2, [pc, #136]	; (800105c <SystemClock_Config+0xb8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <SystemClock_Config+0xb8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <SystemClock_Config+0xbc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <SystemClock_Config+0xbc>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <SystemClock_Config+0xbc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fef1 	bl	8001e00 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001024:	f000 f81e 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f954 	bl	80022f0 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800104e:	f000 f809 	bl	8001064 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	; 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_MspInit+0x4c>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f9da 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USART6_IRQHandler+0x10>)
 800111a:	f001 fc4b 	bl	80029b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000120 	.word	0x20000120

08001128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	return 1;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <_kill>:

int _kill(int pid, int sig)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001142:	f002 fb6b 	bl	800381c <__errno>
 8001146:	4603      	mov	r3, r0
 8001148:	2216      	movs	r2, #22
 800114a:	601a      	str	r2, [r3, #0]
	return -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_exit>:

void _exit (int status)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe7 	bl	8001138 <_kill>
	while (1) {}		/* Make sure we hang here */
 800116a:	e7fe      	b.n	800116a <_exit+0x12>

0800116c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00a      	b.n	8001194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	4601      	mov	r1, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf0      	blt.n	800117e <_read+0x12>
	}

return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e009      	b.n	80011cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf1      	blt.n	80011b8 <_write+0x12>
	}
	return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_close>:

int _close(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	return -1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001206:	605a      	str	r2, [r3, #4]
	return 0;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_isatty>:

int _isatty(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	return 1;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f002 fad0 	bl	800381c <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20030000 	.word	0x20030000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	2000011c 	.word	0x2000011c
 80012b0:	20000178 	.word	0x20000178

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 1 */



  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART6_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012e4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80012e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART6_UART_Init+0x4c>)
 8001310:	f001 f9ce 	bl	80026b0 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f7ff fea3 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000120 	.word	0x20000120
 8001328:	40011400 	.word	0x40011400

0800132c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_UART_MspInit+0x94>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d133      	bne.n	80013b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_UART_MspInit+0x98>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_UART_MspInit+0x98>)
 8001358:	f043 0320 	orr.w	r3, r3, #32
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_UART_MspInit+0x98>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_UART_MspInit+0x98>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_UART_MspInit+0x98>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001386:	23c0      	movs	r3, #192	; 0xc0
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001396:	2308      	movs	r3, #8
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <HAL_UART_MspInit+0x9c>)
 80013a2:	f000 fb4f 	bl	8001a44 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2047      	movs	r0, #71	; 0x47
 80013ac:	f000 fa81 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013b0:	2047      	movs	r0, #71	; 0x47
 80013b2:	f000 fa9a 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d2:	490e      	ldr	r1, [pc, #56]	; (800140c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013e8:	4c0b      	ldr	r4, [pc, #44]	; (8001418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013f6:	f7ff ff5d 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f002 fa15 	bl	8003828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff fd7d 	bl	8000efc <main>
  bx  lr    
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001410:	08004b5c 	.word	0x08004b5c
  ldr r2, =_sbss
 8001414:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001418:	20000178 	.word	0x20000178

0800141c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <HAL_Init+0x40>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <HAL_Init+0x40>)
 8001436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x40>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 fa27 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fe0c 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023c00 	.word	0x40023c00

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fa3f 	bl	8001906 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a0:	f000 fa07 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	20000164 	.word	0x20000164

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000164 	.word	0x20000164

08001504 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0ed      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff f882 	bl	800062c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff ffd8 	bl	80014ec <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff ffd4 	bl	80014ec <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0c5      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0e5      	beq.n	8001540 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0202 	bic.w	r2, r2, #2
 8001582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001584:	f7ff ffb2 	bl	80014ec <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800158a:	e012      	b.n	80015b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800158c:	f7ff ffae 	bl	80014ec <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d90b      	bls.n	80015b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e09f      	b.n	80016f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e5      	bne.n	800158c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e007      	b.n	80015ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7e5b      	ldrb	r3, [r3, #25]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d108      	bne.n	8001604 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e007      	b.n	8001614 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001612:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e9b      	ldrb	r3, [r3, #26]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0220 	orr.w	r2, r2, #32
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e007      	b.n	800163e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0220 	bic.w	r2, r2, #32
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7edb      	ldrb	r3, [r3, #27]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0210 	bic.w	r2, r2, #16
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e007      	b.n	8001668 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0210 	orr.w	r2, r2, #16
 8001666:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7f1b      	ldrb	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0208 	orr.w	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0208 	bic.w	r2, r2, #8
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7f5b      	ldrb	r3, [r3, #29]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0204 	orr.w	r2, r2, #4
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0204 	bic.w	r2, r2, #4
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	ea42 0103 	orr.w	r1, r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1e5a      	subs	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <__NVIC_EnableIRQ+0x38>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800187c:	f7ff ff8e 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff29 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff3e 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff8e 	bl	80017f0 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5d 	bl	800179c <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff31 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fdde 	bl	80014ec <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d008      	beq.n	8001950 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e052      	b.n	80019f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0216 	bic.w	r2, r2, #22
 800195e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <HAL_DMA_Abort+0x62>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0208 	bic.w	r2, r2, #8
 800198e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a0:	e013      	b.n	80019ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a2:	f7ff fda3 	bl	80014ec <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d90c      	bls.n	80019ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e015      	b.n	80019f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e4      	bne.n	80019a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	223f      	movs	r2, #63	; 0x3f
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d004      	beq.n	8001a1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e00c      	b.n	8001a36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2205      	movs	r2, #5
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e177      	b.n	8001d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8166 	bne.w	8001d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d005      	beq.n	8001a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d017      	beq.n	8001b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80c0 	beq.w	8001d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a61      	ldr	r2, [pc, #388]	; (8001d6c <HAL_GPIO_Init+0x328>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_GPIO_Init+0x32c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d037      	beq.n	8001c82 <HAL_GPIO_Init+0x23e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d031      	beq.n	8001c7e <HAL_GPIO_Init+0x23a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a56      	ldr	r2, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x236>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a55      	ldr	r2, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x338>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d025      	beq.n	8001c76 <HAL_GPIO_Init+0x232>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a54      	ldr	r2, [pc, #336]	; (8001d80 <HAL_GPIO_Init+0x33c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01f      	beq.n	8001c72 <HAL_GPIO_Init+0x22e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_GPIO_Init+0x340>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x22a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x344>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x226>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_GPIO_Init+0x348>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x222>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <HAL_GPIO_Init+0x34c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x21e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c5a:	2309      	movs	r3, #9
 8001c5c:	e012      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c5e:	230a      	movs	r3, #10
 8001c60:	e010      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c62:	2308      	movs	r3, #8
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c66:	2307      	movs	r3, #7
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x240>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x328>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_GPIO_Init+0x354>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae84 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40022400 	.word	0x40022400
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e001      	b.n	8001dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e267      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d075      	beq.n	8001f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d00c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b85      	ldr	r3, [pc, #532]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d112      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b7e      	ldr	r3, [pc, #504]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d05b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x108>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d157      	bne.n	8001f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e242      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x74>
 8001e66:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a75      	ldr	r2, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b70      	ldr	r3, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6f      	ldr	r2, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6c      	ldr	r2, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xb0>
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb18 	bl	80014ec <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fb14 	bl	80014ec <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e207      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xc0>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fb04 	bl	80014ec <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fb00 	bl	80014ec <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1f3      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xe8>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f16:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b44      	ldr	r3, [pc, #272]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1c7      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4937      	ldr	r1, [pc, #220]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff fab9 	bl	80014ec <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fab5 	bl	80014ec <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1a8      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4925      	ldr	r1, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x244>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa98 	bl	80014ec <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fa94 	bl	80014ec <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e187      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d036      	beq.n	8002058 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fa78 	bl	80014ec <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff fa74 	bl	80014ec <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e167      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x240>)
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x200>
 800201e:	e01b      	b.n	8002058 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_OscConfig+0x248>)
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fa61 	bl	80014ec <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202c:	e00e      	b.n	800204c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202e:	f7ff fa5d 	bl	80014ec <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d907      	bls.n	800204c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e150      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002040:	40023800 	.word	0x40023800
 8002044:	42470000 	.word	0x42470000
 8002048:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ea      	bne.n	800202e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8097 	beq.w	8002194 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a7c      	ldr	r2, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b77      	ldr	r3, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	4b74      	ldr	r3, [pc, #464]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a73      	ldr	r2, [pc, #460]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fa1d 	bl	80014ec <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff fa19 	bl	80014ec <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e10c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x474>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x2ea>
 80020dc:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
 80020e8:	e01c      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0x30c>
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0x324>
 800210c:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	4a54      	ldr	r2, [pc, #336]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff f9de 	bl	80014ec <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7ff f9da 	bl	80014ec <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0cb      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ee      	beq.n	8002134 <HAL_RCC_OscConfig+0x334>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002158:	f7ff f9c8 	bl	80014ec <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7ff f9c4 	bl	80014ec <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0b5      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ee      	bne.n	8002160 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a38      	ldr	r2, [pc, #224]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a1 	beq.w	80022e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d05c      	beq.n	8002264 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d141      	bne.n	8002236 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f998 	bl	80014ec <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff f994 	bl	80014ec <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e087      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	491b      	ldr	r1, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff f96d 	bl	80014ec <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff f969 	bl	80014ec <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e05c      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x416>
 8002234:	e054      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x478>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff f956 	bl	80014ec <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f952 	bl	80014ec <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e045      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_OscConfig+0x470>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
 8002262:	e03d      	b.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e038      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
 8002270:	40023800 	.word	0x40023800
 8002274:	40007000 	.word	0x40007000
 8002278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4ec>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d028      	beq.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d121      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11a      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d111      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	3b01      	subs	r3, #1
 80022c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0cc      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d90c      	bls.n	800232c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b65      	ldr	r3, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d044      	beq.n	8002410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d119      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023be:	4b3b      	ldr	r3, [pc, #236]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e067      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e0:	f7ff f884 	bl	80014ec <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff f880 	bl	80014ec <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e04f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d20c      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ffe4 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	080049ec 	.word	0x080049ec
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c0:	b090      	sub	sp, #64	; 0x40
 80024c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024cc:	2300      	movs	r3, #0
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00d      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f200 80a1 	bhi.w	8002628 <HAL_RCC_GetSysClockFreq+0x16c>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ee:	e09b      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_GetSysClockFreq+0x184>)
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80024f4:	e09b      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024fa:	e098      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002506:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d028      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	627a      	str	r2, [r7, #36]	; 0x24
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002524:	2100      	movs	r1, #0
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 8002528:	fb03 f201 	mul.w	r2, r3, r1
 800252c:	2300      	movs	r3, #0
 800252e:	fb00 f303 	mul.w	r3, r0, r3
 8002532:	4413      	add	r3, r2
 8002534:	4a43      	ldr	r2, [pc, #268]	; (8002644 <HAL_RCC_GetSysClockFreq+0x188>)
 8002536:	fba0 1202 	umull	r1, r2, r0, r2
 800253a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800253c:	460a      	mov	r2, r1
 800253e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	4413      	add	r3, r2
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	2200      	movs	r2, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	61fa      	str	r2, [r7, #28]
 800254e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002552:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002556:	f7fd feb3 	bl	80002c0 <__aeabi_uldivmod>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4613      	mov	r3, r2
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002562:	e053      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	2200      	movs	r2, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	617a      	str	r2, [r7, #20]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002576:	f04f 0b00 	mov.w	fp, #0
 800257a:	4652      	mov	r2, sl
 800257c:	465b      	mov	r3, fp
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0159      	lsls	r1, r3, #5
 8002588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800258c:	0150      	lsls	r0, r2, #5
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	ebb2 080a 	subs.w	r8, r2, sl
 8002596:	eb63 090b 	sbc.w	r9, r3, fp
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ae:	ebb2 0408 	subs.w	r4, r2, r8
 80025b2:	eb63 0509 	sbc.w	r5, r3, r9
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	00eb      	lsls	r3, r5, #3
 80025c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c4:	00e2      	lsls	r2, r4, #3
 80025c6:	4614      	mov	r4, r2
 80025c8:	461d      	mov	r5, r3
 80025ca:	eb14 030a 	adds.w	r3, r4, sl
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	eb45 030b 	adc.w	r3, r5, fp
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	028a      	lsls	r2, r1, #10
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	2200      	movs	r2, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	60fa      	str	r2, [r7, #12]
 80025fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002600:	f7fd fe5e 	bl	80002c0 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_GetSysClockFreq+0x180>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800261c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x184>)
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002630:	4618      	mov	r0, r3
 8002632:	3740      	adds	r7, #64	; 0x40
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	00f42400 	.word	0x00f42400
 8002644:	017d7840 	.word	0x017d7840

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	080049fc 	.word	0x080049fc

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffdc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0b5b      	lsrs	r3, r3, #13
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	080049fc 	.word	0x080049fc

080026b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e03f      	b.n	8002742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fe28 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fe1d 	bl	8003334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08a      	sub	sp, #40	; 0x28
 800274e:	af02      	add	r7, sp, #8
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b20      	cmp	r3, #32
 8002768:	d17c      	bne.n	8002864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_Transmit+0x2c>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e075      	b.n	8002866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_UART_Transmit+0x3e>
 8002784:	2302      	movs	r3, #2
 8002786:	e06e      	b.n	8002866 <HAL_UART_Transmit+0x11c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800279e:	f7fe fea5 	bl	80014ec <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d108      	bne.n	80027cc <HAL_UART_Transmit+0x82>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e003      	b.n	80027d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027dc:	e02a      	b.n	8002834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fb9b 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e036      	b.n	8002866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800280c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3302      	adds	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e007      	b.n	8002826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3301      	adds	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1cf      	bne.n	80027de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fb6b 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e006      	b.n	8002866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b08a      	sub	sp, #40	; 0x28
 8002872:	af02      	add	r7, sp, #8
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b20      	cmp	r3, #32
 800288c:	f040 808c 	bne.w	80029a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Receive+0x2e>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e084      	b.n	80029aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Receive+0x40>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e07d      	b.n	80029aa <HAL_UART_Receive+0x13c>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2222      	movs	r2, #34	; 0x22
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fe fe0f 	bl	80014ec <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e4:	d108      	bne.n	80028f8 <HAL_UART_Receive+0x8a>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61bb      	str	r3, [r7, #24]
 80028f6:	e003      	b.n	8002900 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002908:	e043      	b.n	8002992 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	2120      	movs	r1, #32
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fb05 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e042      	b.n	80029aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	b29a      	uxth	r2, r3
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	3302      	adds	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e01f      	b.n	8002984 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d007      	beq.n	800295e <HAL_UART_Receive+0xf0>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_UART_Receive+0xfe>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e008      	b.n	800297e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002978:	b2da      	uxtb	r2, r3
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1b6      	bne.n	800290a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e000      	b.n	80029aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029a8:	2302      	movs	r3, #2
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ba      	sub	sp, #232	; 0xe8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_UART_IRQHandler+0x66>
 8002a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fbd3 	bl	80031be <UART_Receive_IT>
      return;
 8002a18:	e256      	b.n	8002ec8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80de 	beq.w	8002be0 <HAL_UART_IRQHandler+0x22c>
 8002a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80d1 	beq.w	8002be0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_UART_IRQHandler+0xae>
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_UART_IRQHandler+0xd2>
 8002a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0202 	orr.w	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
 8002a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d011      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
 8002ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 81ed 	beq.w	8002ebe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_UART_IRQHandler+0x14e>
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fb5e 	bl	80031be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_UART_IRQHandler+0x17a>
 8002b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04f      	beq.n	8002bce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa66 	bl	8003000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	2b40      	cmp	r3, #64	; 0x40
 8002b40:	d141      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3314      	adds	r3, #20
 8002b48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1d9      	bne.n	8002b42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	4a7d      	ldr	r2, [pc, #500]	; (8002d90 <HAL_UART_IRQHandler+0x3dc>)
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe ff2b 	bl	80019fe <HAL_DMA_Abort_IT>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e00e      	b.n	8002bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f99a 	bl	8002ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	e00a      	b.n	8002bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f996 	bl	8002ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	e006      	b.n	8002bdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f992 	bl	8002ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bda:	e170      	b.n	8002ebe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	bf00      	nop
    return;
 8002bde:	e16e      	b.n	8002ebe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	f040 814a 	bne.w	8002e7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8143 	beq.w	8002e7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 813c 	beq.w	8002e7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	f040 80b4 	bne.w	8002d94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8140 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	f080 8139 	bcs.w	8002ec2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	f000 8088 	beq.w	8002d76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1d9      	bne.n	8002c66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3314      	adds	r3, #20
 8002cb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e1      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3314      	adds	r3, #20
 8002d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e3      	bne.n	8002cee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	e853 3f00 	ldrex	r3, [r3]
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	f023 0310 	bic.w	r3, r3, #16
 8002d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d58:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e3      	bne.n	8002d34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fdd4 	bl	800191e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8c0 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d8c:	e099      	b.n	8002ec2 <HAL_UART_IRQHandler+0x50e>
 8002d8e:	bf00      	nop
 8002d90:	080030c7 	.word	0x080030c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 808b 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8086 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dde:	647a      	str	r2, [r7, #68]	; 0x44
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de6:	e841 2300 	strex	r3, r2, [r1]
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e3      	bne.n	8002dba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	623b      	str	r3, [r7, #32]
   return(result);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e16:	633a      	str	r2, [r7, #48]	; 0x30
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e3      	bne.n	8002df2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0310 	bic.w	r3, r3, #16
 8002e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e5c:	61fa      	str	r2, [r7, #28]
 8002e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	69b9      	ldr	r1, [r7, #24]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e3      	bne.n	8002e38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f848 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e7c:	e023      	b.n	8002ec6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_UART_IRQHandler+0x4ea>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f929 	bl	80030ee <UART_Transmit_IT>
    return;
 8002e9c:	e014      	b.n	8002ec8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x514>
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f969 	bl	800318e <UART_EndTransmit_IT>
    return;
 8002ebc:	e004      	b.n	8002ec8 <HAL_UART_IRQHandler+0x514>
    return;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ec6:	bf00      	nop
  }
}
 8002ec8:	37e8      	adds	r7, #232	; 0xe8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop

08002ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b090      	sub	sp, #64	; 0x40
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f34:	e050      	b.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3c:	d04c      	beq.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f44:	f7fe fad2 	bl	80014ec <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d241      	bcs.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f74:	637a      	str	r2, [r7, #52]	; 0x34
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	613b      	str	r3, [r7, #16]
   return(result);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa8:	623a      	str	r2, [r7, #32]
 8002faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fac:	69f9      	ldr	r1, [r7, #28]
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e5      	bne.n	8002f88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e00f      	b.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d09f      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3740      	adds	r7, #64	; 0x40
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b095      	sub	sp, #84	; 0x54
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003028:	643a      	str	r2, [r7, #64]	; 0x40
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800302e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	61fb      	str	r3, [r7, #28]
   return(result);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	2b01      	cmp	r3, #1
 8003076:	d119      	bne.n	80030ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	60bb      	str	r3, [r7, #8]
   return(result);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f023 0310 	bic.w	r3, r3, #16
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003098:	61ba      	str	r2, [r7, #24]
 800309a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	613b      	str	r3, [r7, #16]
   return(result);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ba:	bf00      	nop
 80030bc:	3754      	adds	r7, #84	; 0x54
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ff09 	bl	8002ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b21      	cmp	r3, #33	; 0x21
 8003100:	d13e      	bne.n	8003180 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d114      	bne.n	8003136 <UART_Transmit_IT+0x48>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d110      	bne.n	8003136 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003128:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	1c9a      	adds	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	621a      	str	r2, [r3, #32]
 8003134:	e008      	b.n	8003148 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	1c59      	adds	r1, r3, #1
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6211      	str	r1, [r2, #32]
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4619      	mov	r1, r3
 8003156:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10f      	bne.n	800317c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	e000      	b.n	8003182 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003180:	2302      	movs	r3, #2
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fe8e 	bl	8002ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b08c      	sub	sp, #48	; 0x30
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	f040 80ab 	bne.w	800332a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d117      	bne.n	800320e <UART_Receive_IT+0x50>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d113      	bne.n	800320e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
 800320c:	e026      	b.n	800325c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	d007      	beq.n	8003232 <UART_Receive_IT+0x74>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <UART_Receive_IT+0x82>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e008      	b.n	8003252 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324c:	b2da      	uxtb	r2, r3
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29b      	uxth	r3, r3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4619      	mov	r1, r3
 800326a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800326c:	2b00      	cmp	r3, #0
 800326e:	d15a      	bne.n	8003326 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0220 	bic.w	r2, r2, #32
 800327e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800328e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d135      	bne.n	800331c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f023 0310 	bic.w	r3, r3, #16
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	623a      	str	r2, [r7, #32]
 80032d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	69f9      	ldr	r1, [r7, #28]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d10a      	bne.n	800330e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fdf9 	bl	8002f0c <HAL_UARTEx_RxEventCallback>
 800331a:	e002      	b.n	8003322 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fde1 	bl	8002ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e002      	b.n	800332c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003338:	b0c0      	sub	sp, #256	; 0x100
 800333a:	af00      	add	r7, sp, #0
 800333c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	ea40 0301 	orr.w	r3, r0, r1
 800335c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800338c:	f021 010c 	bic.w	r1, r1, #12
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800339a:	430b      	orrs	r3, r1
 800339c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	6999      	ldr	r1, [r3, #24]
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	ea40 0301 	orr.w	r3, r0, r1
 80033ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b8f      	ldr	r3, [pc, #572]	; (8003600 <UART_SetConfig+0x2cc>)
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d005      	beq.n	80033d4 <UART_SetConfig+0xa0>
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b8d      	ldr	r3, [pc, #564]	; (8003604 <UART_SetConfig+0x2d0>)
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d104      	bne.n	80033de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7ff f958 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 80033d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033dc:	e003      	b.n	80033e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033de:	f7ff f93f 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 80033e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f0:	f040 810c 	bne.w	800360c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003406:	4622      	mov	r2, r4
 8003408:	462b      	mov	r3, r5
 800340a:	1891      	adds	r1, r2, r2
 800340c:	65b9      	str	r1, [r7, #88]	; 0x58
 800340e:	415b      	adcs	r3, r3
 8003410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003416:	4621      	mov	r1, r4
 8003418:	eb12 0801 	adds.w	r8, r2, r1
 800341c:	4629      	mov	r1, r5
 800341e:	eb43 0901 	adc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003444:	462b      	mov	r3, r5
 8003446:	eb49 0303 	adc.w	r3, r9, r3
 800344a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800345a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800345e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003462:	460b      	mov	r3, r1
 8003464:	18db      	adds	r3, r3, r3
 8003466:	653b      	str	r3, [r7, #80]	; 0x50
 8003468:	4613      	mov	r3, r2
 800346a:	eb42 0303 	adc.w	r3, r2, r3
 800346e:	657b      	str	r3, [r7, #84]	; 0x54
 8003470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003478:	f7fc ff22 	bl	80002c0 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4b61      	ldr	r3, [pc, #388]	; (8003608 <UART_SetConfig+0x2d4>)
 8003482:	fba3 2302 	umull	r2, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	011c      	lsls	r4, r3, #4
 800348a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003494:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034a4:	415b      	adcs	r3, r3
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034ac:	4641      	mov	r1, r8
 80034ae:	eb12 0a01 	adds.w	sl, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb43 0b01 	adc.w	fp, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034cc:	4692      	mov	sl, r2
 80034ce:	469b      	mov	fp, r3
 80034d0:	4643      	mov	r3, r8
 80034d2:	eb1a 0303 	adds.w	r3, sl, r3
 80034d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034da:	464b      	mov	r3, r9
 80034dc:	eb4b 0303 	adc.w	r3, fp, r3
 80034e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034f8:	460b      	mov	r3, r1
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	643b      	str	r3, [r7, #64]	; 0x40
 80034fe:	4613      	mov	r3, r2
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	647b      	str	r3, [r7, #68]	; 0x44
 8003506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800350a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800350e:	f7fc fed7 	bl	80002c0 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4611      	mov	r1, r2
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <UART_SetConfig+0x2d4>)
 800351a:	fba3 2301 	umull	r2, r3, r3, r1
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2264      	movs	r2, #100	; 0x64
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <UART_SetConfig+0x2d4>)
 8003530:	fba3 2302 	umull	r2, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800353c:	441c      	add	r4, r3
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003548:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800354c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	63b9      	str	r1, [r7, #56]	; 0x38
 8003558:	415b      	adcs	r3, r3
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6339      	str	r1, [r7, #48]	; 0x30
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003594:	464b      	mov	r3, r9
 8003596:	460a      	mov	r2, r1
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035b4:	460b      	mov	r3, r1
 80035b6:	18db      	adds	r3, r3, r3
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ba:	4613      	mov	r3, r2
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ca:	f7fc fe79 	bl	80002c0 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <UART_SetConfig+0x2d4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	; 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	3332      	adds	r3, #50	; 0x32
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <UART_SetConfig+0x2d4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 0207 	and.w	r2, r3, #7
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4422      	add	r2, r4
 80035fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035fc:	e105      	b.n	800380a <UART_SetConfig+0x4d6>
 80035fe:	bf00      	nop
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800361a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800361e:	4642      	mov	r2, r8
 8003620:	464b      	mov	r3, r9
 8003622:	1891      	adds	r1, r2, r2
 8003624:	6239      	str	r1, [r7, #32]
 8003626:	415b      	adcs	r3, r3
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800362e:	4641      	mov	r1, r8
 8003630:	1854      	adds	r4, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb43 0501 	adc.w	r5, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	00eb      	lsls	r3, r5, #3
 8003642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	4643      	mov	r3, r8
 800364e:	18e3      	adds	r3, r4, r3
 8003650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003654:	464b      	mov	r3, r9
 8003656:	eb45 0303 	adc.w	r3, r5, r3
 800365a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800366a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800367a:	4629      	mov	r1, r5
 800367c:	008b      	lsls	r3, r1, #2
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003684:	4621      	mov	r1, r4
 8003686:	008a      	lsls	r2, r1, #2
 8003688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800368c:	f7fc fe18 	bl	80002c0 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4b60      	ldr	r3, [pc, #384]	; (8003818 <UART_SetConfig+0x4e4>)
 8003696:	fba3 2302 	umull	r2, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	011c      	lsls	r4, r3, #4
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	61b9      	str	r1, [r7, #24]
 80036b8:	415b      	adcs	r3, r3
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c0:	4641      	mov	r1, r8
 80036c2:	1851      	adds	r1, r2, r1
 80036c4:	6139      	str	r1, [r7, #16]
 80036c6:	4649      	mov	r1, r9
 80036c8:	414b      	adcs	r3, r1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d8:	4659      	mov	r1, fp
 80036da:	00cb      	lsls	r3, r1, #3
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e2:	4651      	mov	r1, sl
 80036e4:	00ca      	lsls	r2, r1, #3
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	4642      	mov	r2, r8
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036f4:	464b      	mov	r3, r9
 80036f6:	460a      	mov	r2, r1
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	67bb      	str	r3, [r7, #120]	; 0x78
 800370a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003718:	4649      	mov	r1, r9
 800371a:	008b      	lsls	r3, r1, #2
 800371c:	4641      	mov	r1, r8
 800371e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003722:	4641      	mov	r1, r8
 8003724:	008a      	lsls	r2, r1, #2
 8003726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800372a:	f7fc fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <UART_SetConfig+0x4e4>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <UART_SetConfig+0x4e4>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003752:	441c      	add	r4, r3
 8003754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003758:	2200      	movs	r2, #0
 800375a:	673b      	str	r3, [r7, #112]	; 0x70
 800375c:	677a      	str	r2, [r7, #116]	; 0x74
 800375e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003762:	4642      	mov	r2, r8
 8003764:	464b      	mov	r3, r9
 8003766:	1891      	adds	r1, r2, r2
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	415b      	adcs	r3, r3
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003772:	4641      	mov	r1, r8
 8003774:	1851      	adds	r1, r2, r1
 8003776:	6039      	str	r1, [r7, #0]
 8003778:	4649      	mov	r1, r9
 800377a:	414b      	adcs	r3, r1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800378a:	4659      	mov	r1, fp
 800378c:	00cb      	lsls	r3, r1, #3
 800378e:	4651      	mov	r1, sl
 8003790:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003794:	4651      	mov	r1, sl
 8003796:	00ca      	lsls	r2, r1, #3
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	4603      	mov	r3, r0
 800379e:	4642      	mov	r2, r8
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037a4:	464b      	mov	r3, r9
 80037a6:	460a      	mov	r2, r1
 80037a8:	eb42 0303 	adc.w	r3, r2, r3
 80037ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	663b      	str	r3, [r7, #96]	; 0x60
 80037b8:	667a      	str	r2, [r7, #100]	; 0x64
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037c6:	4649      	mov	r1, r9
 80037c8:	008b      	lsls	r3, r1, #2
 80037ca:	4641      	mov	r1, r8
 80037cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d0:	4641      	mov	r1, r8
 80037d2:	008a      	lsls	r2, r1, #2
 80037d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037d8:	f7fc fd72 	bl	80002c0 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <UART_SetConfig+0x4e4>)
 80037e2:	fba3 1302 	umull	r1, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2164      	movs	r1, #100	; 0x64
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	3332      	adds	r3, #50	; 0x32
 80037f4:	4a08      	ldr	r2, [pc, #32]	; (8003818 <UART_SetConfig+0x4e4>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4422      	add	r2, r4
 8003808:	609a      	str	r2, [r3, #8]
}
 800380a:	bf00      	nop
 800380c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003816:	bf00      	nop
 8003818:	51eb851f 	.word	0x51eb851f

0800381c <__errno>:
 800381c:	4b01      	ldr	r3, [pc, #4]	; (8003824 <__errno+0x8>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000000c 	.word	0x2000000c

08003828 <__libc_init_array>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4d0d      	ldr	r5, [pc, #52]	; (8003860 <__libc_init_array+0x38>)
 800382c:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <__libc_init_array+0x3c>)
 800382e:	1b64      	subs	r4, r4, r5
 8003830:	10a4      	asrs	r4, r4, #2
 8003832:	2600      	movs	r6, #0
 8003834:	42a6      	cmp	r6, r4
 8003836:	d109      	bne.n	800384c <__libc_init_array+0x24>
 8003838:	4d0b      	ldr	r5, [pc, #44]	; (8003868 <__libc_init_array+0x40>)
 800383a:	4c0c      	ldr	r4, [pc, #48]	; (800386c <__libc_init_array+0x44>)
 800383c:	f001 f88c 	bl	8004958 <_init>
 8003840:	1b64      	subs	r4, r4, r5
 8003842:	10a4      	asrs	r4, r4, #2
 8003844:	2600      	movs	r6, #0
 8003846:	42a6      	cmp	r6, r4
 8003848:	d105      	bne.n	8003856 <__libc_init_array+0x2e>
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003850:	4798      	blx	r3
 8003852:	3601      	adds	r6, #1
 8003854:	e7ee      	b.n	8003834 <__libc_init_array+0xc>
 8003856:	f855 3b04 	ldr.w	r3, [r5], #4
 800385a:	4798      	blx	r3
 800385c:	3601      	adds	r6, #1
 800385e:	e7f2      	b.n	8003846 <__libc_init_array+0x1e>
 8003860:	08004b54 	.word	0x08004b54
 8003864:	08004b54 	.word	0x08004b54
 8003868:	08004b54 	.word	0x08004b54
 800386c:	08004b58 	.word	0x08004b58

08003870 <memcpy>:
 8003870:	440a      	add	r2, r1
 8003872:	4291      	cmp	r1, r2
 8003874:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003878:	d100      	bne.n	800387c <memcpy+0xc>
 800387a:	4770      	bx	lr
 800387c:	b510      	push	{r4, lr}
 800387e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003886:	4291      	cmp	r1, r2
 8003888:	d1f9      	bne.n	800387e <memcpy+0xe>
 800388a:	bd10      	pop	{r4, pc}

0800388c <memset>:
 800388c:	4402      	add	r2, r0
 800388e:	4603      	mov	r3, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	f803 1b01 	strb.w	r1, [r3], #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <strcpy>:
 800389c:	4603      	mov	r3, r0
 800389e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038a2:	f803 2b01 	strb.w	r2, [r3], #1
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d1f9      	bne.n	800389e <strcpy+0x2>
 80038aa:	4770      	bx	lr

080038ac <strtok>:
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <strtok+0x5c>)
 80038ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038b0:	681e      	ldr	r6, [r3, #0]
 80038b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80038b4:	4605      	mov	r5, r0
 80038b6:	b9fc      	cbnz	r4, 80038f8 <strtok+0x4c>
 80038b8:	2050      	movs	r0, #80	; 0x50
 80038ba:	9101      	str	r1, [sp, #4]
 80038bc:	f000 f882 	bl	80039c4 <malloc>
 80038c0:	9901      	ldr	r1, [sp, #4]
 80038c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80038c4:	4602      	mov	r2, r0
 80038c6:	b920      	cbnz	r0, 80038d2 <strtok+0x26>
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <strtok+0x60>)
 80038ca:	4811      	ldr	r0, [pc, #68]	; (8003910 <strtok+0x64>)
 80038cc:	2157      	movs	r1, #87	; 0x57
 80038ce:	f000 f849 	bl	8003964 <__assert_func>
 80038d2:	e9c0 4400 	strd	r4, r4, [r0]
 80038d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80038da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80038de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80038e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80038e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80038ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80038ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80038f2:	6184      	str	r4, [r0, #24]
 80038f4:	7704      	strb	r4, [r0, #28]
 80038f6:	6244      	str	r4, [r0, #36]	; 0x24
 80038f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80038fa:	2301      	movs	r3, #1
 80038fc:	4628      	mov	r0, r5
 80038fe:	b002      	add	sp, #8
 8003900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003904:	f000 b806 	b.w	8003914 <__strtok_r>
 8003908:	2000000c 	.word	0x2000000c
 800390c:	08004a08 	.word	0x08004a08
 8003910:	08004a1f 	.word	0x08004a1f

08003914 <__strtok_r>:
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	b908      	cbnz	r0, 800391c <__strtok_r+0x8>
 8003918:	6810      	ldr	r0, [r2, #0]
 800391a:	b188      	cbz	r0, 8003940 <__strtok_r+0x2c>
 800391c:	4604      	mov	r4, r0
 800391e:	4620      	mov	r0, r4
 8003920:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003924:	460f      	mov	r7, r1
 8003926:	f817 6b01 	ldrb.w	r6, [r7], #1
 800392a:	b91e      	cbnz	r6, 8003934 <__strtok_r+0x20>
 800392c:	b965      	cbnz	r5, 8003948 <__strtok_r+0x34>
 800392e:	6015      	str	r5, [r2, #0]
 8003930:	4628      	mov	r0, r5
 8003932:	e005      	b.n	8003940 <__strtok_r+0x2c>
 8003934:	42b5      	cmp	r5, r6
 8003936:	d1f6      	bne.n	8003926 <__strtok_r+0x12>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f0      	bne.n	800391e <__strtok_r+0xa>
 800393c:	6014      	str	r4, [r2, #0]
 800393e:	7003      	strb	r3, [r0, #0]
 8003940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003942:	461c      	mov	r4, r3
 8003944:	e00c      	b.n	8003960 <__strtok_r+0x4c>
 8003946:	b915      	cbnz	r5, 800394e <__strtok_r+0x3a>
 8003948:	f814 3b01 	ldrb.w	r3, [r4], #1
 800394c:	460e      	mov	r6, r1
 800394e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003952:	42ab      	cmp	r3, r5
 8003954:	d1f7      	bne.n	8003946 <__strtok_r+0x32>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f3      	beq.n	8003942 <__strtok_r+0x2e>
 800395a:	2300      	movs	r3, #0
 800395c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003960:	6014      	str	r4, [r2, #0]
 8003962:	e7ed      	b.n	8003940 <__strtok_r+0x2c>

08003964 <__assert_func>:
 8003964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003966:	4614      	mov	r4, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <__assert_func+0x2c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4605      	mov	r5, r0
 8003970:	68d8      	ldr	r0, [r3, #12]
 8003972:	b14c      	cbz	r4, 8003988 <__assert_func+0x24>
 8003974:	4b07      	ldr	r3, [pc, #28]	; (8003994 <__assert_func+0x30>)
 8003976:	9100      	str	r1, [sp, #0]
 8003978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800397c:	4906      	ldr	r1, [pc, #24]	; (8003998 <__assert_func+0x34>)
 800397e:	462b      	mov	r3, r5
 8003980:	f000 f80e 	bl	80039a0 <fiprintf>
 8003984:	f000 fcc4 	bl	8004310 <abort>
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__assert_func+0x38>)
 800398a:	461c      	mov	r4, r3
 800398c:	e7f3      	b.n	8003976 <__assert_func+0x12>
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c
 8003994:	08004a7c 	.word	0x08004a7c
 8003998:	08004a89 	.word	0x08004a89
 800399c:	08004ab7 	.word	0x08004ab7

080039a0 <fiprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b503      	push	{r0, r1, lr}
 80039a4:	4601      	mov	r1, r0
 80039a6:	ab03      	add	r3, sp, #12
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <fiprintf+0x20>)
 80039aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ae:	6800      	ldr	r0, [r0, #0]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	f000 f919 	bl	8003be8 <_vfiprintf_r>
 80039b6:	b002      	add	sp, #8
 80039b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039bc:	b003      	add	sp, #12
 80039be:	4770      	bx	lr
 80039c0:	2000000c 	.word	0x2000000c

080039c4 <malloc>:
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <malloc+0xc>)
 80039c6:	4601      	mov	r1, r0
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f000 b86f 	b.w	8003aac <_malloc_r>
 80039ce:	bf00      	nop
 80039d0:	2000000c 	.word	0x2000000c

080039d4 <_free_r>:
 80039d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039d6:	2900      	cmp	r1, #0
 80039d8:	d044      	beq.n	8003a64 <_free_r+0x90>
 80039da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039de:	9001      	str	r0, [sp, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f1a1 0404 	sub.w	r4, r1, #4
 80039e6:	bfb8      	it	lt
 80039e8:	18e4      	addlt	r4, r4, r3
 80039ea:	f000 feb9 	bl	8004760 <__malloc_lock>
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <_free_r+0x94>)
 80039f0:	9801      	ldr	r0, [sp, #4]
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	b933      	cbnz	r3, 8003a04 <_free_r+0x30>
 80039f6:	6063      	str	r3, [r4, #4]
 80039f8:	6014      	str	r4, [r2, #0]
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a00:	f000 beb4 	b.w	800476c <__malloc_unlock>
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	d908      	bls.n	8003a1a <_free_r+0x46>
 8003a08:	6825      	ldr	r5, [r4, #0]
 8003a0a:	1961      	adds	r1, r4, r5
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf01      	itttt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	1949      	addeq	r1, r1, r5
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	e7ed      	b.n	80039f6 <_free_r+0x22>
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b10b      	cbz	r3, 8003a24 <_free_r+0x50>
 8003a20:	42a3      	cmp	r3, r4
 8003a22:	d9fa      	bls.n	8003a1a <_free_r+0x46>
 8003a24:	6811      	ldr	r1, [r2, #0]
 8003a26:	1855      	adds	r5, r2, r1
 8003a28:	42a5      	cmp	r5, r4
 8003a2a:	d10b      	bne.n	8003a44 <_free_r+0x70>
 8003a2c:	6824      	ldr	r4, [r4, #0]
 8003a2e:	4421      	add	r1, r4
 8003a30:	1854      	adds	r4, r2, r1
 8003a32:	42a3      	cmp	r3, r4
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	d1e0      	bne.n	80039fa <_free_r+0x26>
 8003a38:	681c      	ldr	r4, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	6053      	str	r3, [r2, #4]
 8003a3e:	4421      	add	r1, r4
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	e7da      	b.n	80039fa <_free_r+0x26>
 8003a44:	d902      	bls.n	8003a4c <_free_r+0x78>
 8003a46:	230c      	movs	r3, #12
 8003a48:	6003      	str	r3, [r0, #0]
 8003a4a:	e7d6      	b.n	80039fa <_free_r+0x26>
 8003a4c:	6825      	ldr	r5, [r4, #0]
 8003a4e:	1961      	adds	r1, r4, r5
 8003a50:	428b      	cmp	r3, r1
 8003a52:	bf04      	itt	eq
 8003a54:	6819      	ldreq	r1, [r3, #0]
 8003a56:	685b      	ldreq	r3, [r3, #4]
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	bf04      	itt	eq
 8003a5c:	1949      	addeq	r1, r1, r5
 8003a5e:	6021      	streq	r1, [r4, #0]
 8003a60:	6054      	str	r4, [r2, #4]
 8003a62:	e7ca      	b.n	80039fa <_free_r+0x26>
 8003a64:	b003      	add	sp, #12
 8003a66:	bd30      	pop	{r4, r5, pc}
 8003a68:	20000168 	.word	0x20000168

08003a6c <sbrk_aligned>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4e0e      	ldr	r6, [pc, #56]	; (8003aa8 <sbrk_aligned+0x3c>)
 8003a70:	460c      	mov	r4, r1
 8003a72:	6831      	ldr	r1, [r6, #0]
 8003a74:	4605      	mov	r5, r0
 8003a76:	b911      	cbnz	r1, 8003a7e <sbrk_aligned+0x12>
 8003a78:	f000 fb7a 	bl	8004170 <_sbrk_r>
 8003a7c:	6030      	str	r0, [r6, #0]
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	f000 fb75 	bl	8004170 <_sbrk_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	d00a      	beq.n	8003aa0 <sbrk_aligned+0x34>
 8003a8a:	1cc4      	adds	r4, r0, #3
 8003a8c:	f024 0403 	bic.w	r4, r4, #3
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d007      	beq.n	8003aa4 <sbrk_aligned+0x38>
 8003a94:	1a21      	subs	r1, r4, r0
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 fb6a 	bl	8004170 <_sbrk_r>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d101      	bne.n	8003aa4 <sbrk_aligned+0x38>
 8003aa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	2000016c 	.word	0x2000016c

08003aac <_malloc_r>:
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	1ccd      	adds	r5, r1, #3
 8003ab2:	f025 0503 	bic.w	r5, r5, #3
 8003ab6:	3508      	adds	r5, #8
 8003ab8:	2d0c      	cmp	r5, #12
 8003aba:	bf38      	it	cc
 8003abc:	250c      	movcc	r5, #12
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	db01      	blt.n	8003ac8 <_malloc_r+0x1c>
 8003ac4:	42a9      	cmp	r1, r5
 8003ac6:	d905      	bls.n	8003ad4 <_malloc_r+0x28>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	2600      	movs	r6, #0
 8003ace:	4630      	mov	r0, r6
 8003ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad4:	4e2e      	ldr	r6, [pc, #184]	; (8003b90 <_malloc_r+0xe4>)
 8003ad6:	f000 fe43 	bl	8004760 <__malloc_lock>
 8003ada:	6833      	ldr	r3, [r6, #0]
 8003adc:	461c      	mov	r4, r3
 8003ade:	bb34      	cbnz	r4, 8003b2e <_malloc_r+0x82>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff ffc2 	bl	8003a6c <sbrk_aligned>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	4604      	mov	r4, r0
 8003aec:	d14d      	bne.n	8003b8a <_malloc_r+0xde>
 8003aee:	6834      	ldr	r4, [r6, #0]
 8003af0:	4626      	mov	r6, r4
 8003af2:	2e00      	cmp	r6, #0
 8003af4:	d140      	bne.n	8003b78 <_malloc_r+0xcc>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	4631      	mov	r1, r6
 8003afa:	4638      	mov	r0, r7
 8003afc:	eb04 0803 	add.w	r8, r4, r3
 8003b00:	f000 fb36 	bl	8004170 <_sbrk_r>
 8003b04:	4580      	cmp	r8, r0
 8003b06:	d13a      	bne.n	8003b7e <_malloc_r+0xd2>
 8003b08:	6821      	ldr	r1, [r4, #0]
 8003b0a:	3503      	adds	r5, #3
 8003b0c:	1a6d      	subs	r5, r5, r1
 8003b0e:	f025 0503 	bic.w	r5, r5, #3
 8003b12:	3508      	adds	r5, #8
 8003b14:	2d0c      	cmp	r5, #12
 8003b16:	bf38      	it	cc
 8003b18:	250c      	movcc	r5, #12
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff ffa5 	bl	8003a6c <sbrk_aligned>
 8003b22:	3001      	adds	r0, #1
 8003b24:	d02b      	beq.n	8003b7e <_malloc_r+0xd2>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	442b      	add	r3, r5
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	e00e      	b.n	8003b4c <_malloc_r+0xa0>
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	1b52      	subs	r2, r2, r5
 8003b32:	d41e      	bmi.n	8003b72 <_malloc_r+0xc6>
 8003b34:	2a0b      	cmp	r2, #11
 8003b36:	d916      	bls.n	8003b66 <_malloc_r+0xba>
 8003b38:	1961      	adds	r1, r4, r5
 8003b3a:	42a3      	cmp	r3, r4
 8003b3c:	6025      	str	r5, [r4, #0]
 8003b3e:	bf18      	it	ne
 8003b40:	6059      	strne	r1, [r3, #4]
 8003b42:	6863      	ldr	r3, [r4, #4]
 8003b44:	bf08      	it	eq
 8003b46:	6031      	streq	r1, [r6, #0]
 8003b48:	5162      	str	r2, [r4, r5]
 8003b4a:	604b      	str	r3, [r1, #4]
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f104 060b 	add.w	r6, r4, #11
 8003b52:	f000 fe0b 	bl	800476c <__malloc_unlock>
 8003b56:	f026 0607 	bic.w	r6, r6, #7
 8003b5a:	1d23      	adds	r3, r4, #4
 8003b5c:	1af2      	subs	r2, r6, r3
 8003b5e:	d0b6      	beq.n	8003ace <_malloc_r+0x22>
 8003b60:	1b9b      	subs	r3, r3, r6
 8003b62:	50a3      	str	r3, [r4, r2]
 8003b64:	e7b3      	b.n	8003ace <_malloc_r+0x22>
 8003b66:	6862      	ldr	r2, [r4, #4]
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	bf0c      	ite	eq
 8003b6c:	6032      	streq	r2, [r6, #0]
 8003b6e:	605a      	strne	r2, [r3, #4]
 8003b70:	e7ec      	b.n	8003b4c <_malloc_r+0xa0>
 8003b72:	4623      	mov	r3, r4
 8003b74:	6864      	ldr	r4, [r4, #4]
 8003b76:	e7b2      	b.n	8003ade <_malloc_r+0x32>
 8003b78:	4634      	mov	r4, r6
 8003b7a:	6876      	ldr	r6, [r6, #4]
 8003b7c:	e7b9      	b.n	8003af2 <_malloc_r+0x46>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4638      	mov	r0, r7
 8003b84:	f000 fdf2 	bl	800476c <__malloc_unlock>
 8003b88:	e7a1      	b.n	8003ace <_malloc_r+0x22>
 8003b8a:	6025      	str	r5, [r4, #0]
 8003b8c:	e7de      	b.n	8003b4c <_malloc_r+0xa0>
 8003b8e:	bf00      	nop
 8003b90:	20000168 	.word	0x20000168

08003b94 <__sfputc_r>:
 8003b94:	6893      	ldr	r3, [r2, #8]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	b410      	push	{r4}
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	da08      	bge.n	8003bb2 <__sfputc_r+0x1e>
 8003ba0:	6994      	ldr	r4, [r2, #24]
 8003ba2:	42a3      	cmp	r3, r4
 8003ba4:	db01      	blt.n	8003baa <__sfputc_r+0x16>
 8003ba6:	290a      	cmp	r1, #10
 8003ba8:	d103      	bne.n	8003bb2 <__sfputc_r+0x1e>
 8003baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bae:	f000 baef 	b.w	8004190 <__swbuf_r>
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	1c58      	adds	r0, r3, #1
 8003bb6:	6010      	str	r0, [r2, #0]
 8003bb8:	7019      	strb	r1, [r3, #0]
 8003bba:	4608      	mov	r0, r1
 8003bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <__sfputs_r>:
 8003bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc4:	4606      	mov	r6, r0
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	18d5      	adds	r5, r2, r3
 8003bcc:	42ac      	cmp	r4, r5
 8003bce:	d101      	bne.n	8003bd4 <__sfputs_r+0x12>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e007      	b.n	8003be4 <__sfputs_r+0x22>
 8003bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd8:	463a      	mov	r2, r7
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7ff ffda 	bl	8003b94 <__sfputc_r>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d1f3      	bne.n	8003bcc <__sfputs_r+0xa>
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003be8 <_vfiprintf_r>:
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	460d      	mov	r5, r1
 8003bee:	b09d      	sub	sp, #116	; 0x74
 8003bf0:	4614      	mov	r4, r2
 8003bf2:	4698      	mov	r8, r3
 8003bf4:	4606      	mov	r6, r0
 8003bf6:	b118      	cbz	r0, 8003c00 <_vfiprintf_r+0x18>
 8003bf8:	6983      	ldr	r3, [r0, #24]
 8003bfa:	b90b      	cbnz	r3, 8003c00 <_vfiprintf_r+0x18>
 8003bfc:	f000 fcaa 	bl	8004554 <__sinit>
 8003c00:	4b89      	ldr	r3, [pc, #548]	; (8003e28 <_vfiprintf_r+0x240>)
 8003c02:	429d      	cmp	r5, r3
 8003c04:	d11b      	bne.n	8003c3e <_vfiprintf_r+0x56>
 8003c06:	6875      	ldr	r5, [r6, #4]
 8003c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c0a:	07d9      	lsls	r1, r3, #31
 8003c0c:	d405      	bmi.n	8003c1a <_vfiprintf_r+0x32>
 8003c0e:	89ab      	ldrh	r3, [r5, #12]
 8003c10:	059a      	lsls	r2, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_vfiprintf_r+0x32>
 8003c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c16:	f000 fd3b 	bl	8004690 <__retarget_lock_acquire_recursive>
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	071b      	lsls	r3, r3, #28
 8003c1e:	d501      	bpl.n	8003c24 <_vfiprintf_r+0x3c>
 8003c20:	692b      	ldr	r3, [r5, #16]
 8003c22:	b9eb      	cbnz	r3, 8003c60 <_vfiprintf_r+0x78>
 8003c24:	4629      	mov	r1, r5
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 fb04 	bl	8004234 <__swsetup_r>
 8003c2c:	b1c0      	cbz	r0, 8003c60 <_vfiprintf_r+0x78>
 8003c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c30:	07dc      	lsls	r4, r3, #31
 8003c32:	d50e      	bpl.n	8003c52 <_vfiprintf_r+0x6a>
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c38:	b01d      	add	sp, #116	; 0x74
 8003c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3e:	4b7b      	ldr	r3, [pc, #492]	; (8003e2c <_vfiprintf_r+0x244>)
 8003c40:	429d      	cmp	r5, r3
 8003c42:	d101      	bne.n	8003c48 <_vfiprintf_r+0x60>
 8003c44:	68b5      	ldr	r5, [r6, #8]
 8003c46:	e7df      	b.n	8003c08 <_vfiprintf_r+0x20>
 8003c48:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <_vfiprintf_r+0x248>)
 8003c4a:	429d      	cmp	r5, r3
 8003c4c:	bf08      	it	eq
 8003c4e:	68f5      	ldreq	r5, [r6, #12]
 8003c50:	e7da      	b.n	8003c08 <_vfiprintf_r+0x20>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	0598      	lsls	r0, r3, #22
 8003c56:	d4ed      	bmi.n	8003c34 <_vfiprintf_r+0x4c>
 8003c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c5a:	f000 fd1a 	bl	8004692 <__retarget_lock_release_recursive>
 8003c5e:	e7e9      	b.n	8003c34 <_vfiprintf_r+0x4c>
 8003c60:	2300      	movs	r3, #0
 8003c62:	9309      	str	r3, [sp, #36]	; 0x24
 8003c64:	2320      	movs	r3, #32
 8003c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c6e:	2330      	movs	r3, #48	; 0x30
 8003c70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e34 <_vfiprintf_r+0x24c>
 8003c74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c78:	f04f 0901 	mov.w	r9, #1
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	469a      	mov	sl, r3
 8003c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c84:	b10a      	cbz	r2, 8003c8a <_vfiprintf_r+0xa2>
 8003c86:	2a25      	cmp	r2, #37	; 0x25
 8003c88:	d1f9      	bne.n	8003c7e <_vfiprintf_r+0x96>
 8003c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c8e:	d00b      	beq.n	8003ca8 <_vfiprintf_r+0xc0>
 8003c90:	465b      	mov	r3, fp
 8003c92:	4622      	mov	r2, r4
 8003c94:	4629      	mov	r1, r5
 8003c96:	4630      	mov	r0, r6
 8003c98:	f7ff ff93 	bl	8003bc2 <__sfputs_r>
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f000 80aa 	beq.w	8003df6 <_vfiprintf_r+0x20e>
 8003ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca4:	445a      	add	r2, fp
 8003ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a2 	beq.w	8003df6 <_vfiprintf_r+0x20e>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cbc:	f10a 0a01 	add.w	sl, sl, #1
 8003cc0:	9304      	str	r3, [sp, #16]
 8003cc2:	9307      	str	r3, [sp, #28]
 8003cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8003cca:	4654      	mov	r4, sl
 8003ccc:	2205      	movs	r2, #5
 8003cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd2:	4858      	ldr	r0, [pc, #352]	; (8003e34 <_vfiprintf_r+0x24c>)
 8003cd4:	f7fc faa4 	bl	8000220 <memchr>
 8003cd8:	9a04      	ldr	r2, [sp, #16]
 8003cda:	b9d8      	cbnz	r0, 8003d14 <_vfiprintf_r+0x12c>
 8003cdc:	06d1      	lsls	r1, r2, #27
 8003cde:	bf44      	itt	mi
 8003ce0:	2320      	movmi	r3, #32
 8003ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce6:	0713      	lsls	r3, r2, #28
 8003ce8:	bf44      	itt	mi
 8003cea:	232b      	movmi	r3, #43	; 0x2b
 8003cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf6:	d015      	beq.n	8003d24 <_vfiprintf_r+0x13c>
 8003cf8:	9a07      	ldr	r2, [sp, #28]
 8003cfa:	4654      	mov	r4, sl
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f04f 0c0a 	mov.w	ip, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d08:	3b30      	subs	r3, #48	; 0x30
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	d94e      	bls.n	8003dac <_vfiprintf_r+0x1c4>
 8003d0e:	b1b0      	cbz	r0, 8003d3e <_vfiprintf_r+0x156>
 8003d10:	9207      	str	r2, [sp, #28]
 8003d12:	e014      	b.n	8003d3e <_vfiprintf_r+0x156>
 8003d14:	eba0 0308 	sub.w	r3, r0, r8
 8003d18:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	46a2      	mov	sl, r4
 8003d22:	e7d2      	b.n	8003cca <_vfiprintf_r+0xe2>
 8003d24:	9b03      	ldr	r3, [sp, #12]
 8003d26:	1d19      	adds	r1, r3, #4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	9103      	str	r1, [sp, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bfbb      	ittet	lt
 8003d30:	425b      	neglt	r3, r3
 8003d32:	f042 0202 	orrlt.w	r2, r2, #2
 8003d36:	9307      	strge	r3, [sp, #28]
 8003d38:	9307      	strlt	r3, [sp, #28]
 8003d3a:	bfb8      	it	lt
 8003d3c:	9204      	strlt	r2, [sp, #16]
 8003d3e:	7823      	ldrb	r3, [r4, #0]
 8003d40:	2b2e      	cmp	r3, #46	; 0x2e
 8003d42:	d10c      	bne.n	8003d5e <_vfiprintf_r+0x176>
 8003d44:	7863      	ldrb	r3, [r4, #1]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d135      	bne.n	8003db6 <_vfiprintf_r+0x1ce>
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9203      	str	r2, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d5a:	3402      	adds	r4, #2
 8003d5c:	9305      	str	r3, [sp, #20]
 8003d5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e44 <_vfiprintf_r+0x25c>
 8003d62:	7821      	ldrb	r1, [r4, #0]
 8003d64:	2203      	movs	r2, #3
 8003d66:	4650      	mov	r0, sl
 8003d68:	f7fc fa5a 	bl	8000220 <memchr>
 8003d6c:	b140      	cbz	r0, 8003d80 <_vfiprintf_r+0x198>
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	eba0 000a 	sub.w	r0, r0, sl
 8003d74:	fa03 f000 	lsl.w	r0, r3, r0
 8003d78:	9b04      	ldr	r3, [sp, #16]
 8003d7a:	4303      	orrs	r3, r0
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d84:	482c      	ldr	r0, [pc, #176]	; (8003e38 <_vfiprintf_r+0x250>)
 8003d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	f7fc fa48 	bl	8000220 <memchr>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d03f      	beq.n	8003e14 <_vfiprintf_r+0x22c>
 8003d94:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <_vfiprintf_r+0x254>)
 8003d96:	bb1b      	cbnz	r3, 8003de0 <_vfiprintf_r+0x1f8>
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	3307      	adds	r3, #7
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	443b      	add	r3, r7
 8003da8:	9309      	str	r3, [sp, #36]	; 0x24
 8003daa:	e767      	b.n	8003c7c <_vfiprintf_r+0x94>
 8003dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db0:	460c      	mov	r4, r1
 8003db2:	2001      	movs	r0, #1
 8003db4:	e7a5      	b.n	8003d02 <_vfiprintf_r+0x11a>
 8003db6:	2300      	movs	r3, #0
 8003db8:	3401      	adds	r4, #1
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d903      	bls.n	8003dd6 <_vfiprintf_r+0x1ee>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0c5      	beq.n	8003d5e <_vfiprintf_r+0x176>
 8003dd2:	9105      	str	r1, [sp, #20]
 8003dd4:	e7c3      	b.n	8003d5e <_vfiprintf_r+0x176>
 8003dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dda:	4604      	mov	r4, r0
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e7f0      	b.n	8003dc2 <_vfiprintf_r+0x1da>
 8003de0:	ab03      	add	r3, sp, #12
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	462a      	mov	r2, r5
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <_vfiprintf_r+0x258>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	4630      	mov	r0, r6
 8003dec:	f3af 8000 	nop.w
 8003df0:	4607      	mov	r7, r0
 8003df2:	1c78      	adds	r0, r7, #1
 8003df4:	d1d6      	bne.n	8003da4 <_vfiprintf_r+0x1bc>
 8003df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003df8:	07d9      	lsls	r1, r3, #31
 8003dfa:	d405      	bmi.n	8003e08 <_vfiprintf_r+0x220>
 8003dfc:	89ab      	ldrh	r3, [r5, #12]
 8003dfe:	059a      	lsls	r2, r3, #22
 8003e00:	d402      	bmi.n	8003e08 <_vfiprintf_r+0x220>
 8003e02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e04:	f000 fc45 	bl	8004692 <__retarget_lock_release_recursive>
 8003e08:	89ab      	ldrh	r3, [r5, #12]
 8003e0a:	065b      	lsls	r3, r3, #25
 8003e0c:	f53f af12 	bmi.w	8003c34 <_vfiprintf_r+0x4c>
 8003e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e12:	e711      	b.n	8003c38 <_vfiprintf_r+0x50>
 8003e14:	ab03      	add	r3, sp, #12
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <_vfiprintf_r+0x258>)
 8003e1c:	a904      	add	r1, sp, #16
 8003e1e:	4630      	mov	r0, r6
 8003e20:	f000 f880 	bl	8003f24 <_printf_i>
 8003e24:	e7e4      	b.n	8003df0 <_vfiprintf_r+0x208>
 8003e26:	bf00      	nop
 8003e28:	08004b0c 	.word	0x08004b0c
 8003e2c:	08004b2c 	.word	0x08004b2c
 8003e30:	08004aec 	.word	0x08004aec
 8003e34:	08004ab8 	.word	0x08004ab8
 8003e38:	08004ac2 	.word	0x08004ac2
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	08003bc3 	.word	0x08003bc3
 8003e44:	08004abe 	.word	0x08004abe

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	4699      	mov	r9, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	bfb8      	it	lt
 8003e5c:	4613      	movlt	r3, r2
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e64:	4607      	mov	r7, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	b10a      	cbz	r2, 8003e6e <_printf_common+0x26>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0699      	lsls	r1, r3, #26
 8003e72:	bf42      	ittt	mi
 8003e74:	6833      	ldrmi	r3, [r6, #0]
 8003e76:	3302      	addmi	r3, #2
 8003e78:	6033      	strmi	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f015 0506 	ands.w	r5, r5, #6
 8003e80:	d106      	bne.n	8003e90 <_printf_common+0x48>
 8003e82:	f104 0a19 	add.w	sl, r4, #25
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	6832      	ldr	r2, [r6, #0]
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dc26      	bgt.n	8003ede <_printf_common+0x96>
 8003e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e94:	1e13      	subs	r3, r2, #0
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	bf18      	it	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d42b      	bmi.n	8003ef8 <_printf_common+0xb0>
 8003ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c0      	blx	r8
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d01e      	beq.n	8003eec <_printf_common+0xa4>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	68e5      	ldr	r5, [r4, #12]
 8003eb2:	6832      	ldr	r2, [r6, #0]
 8003eb4:	f003 0306 	and.w	r3, r3, #6
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	bf08      	it	eq
 8003ebc:	1aad      	subeq	r5, r5, r2
 8003ebe:	68a3      	ldr	r3, [r4, #8]
 8003ec0:	6922      	ldr	r2, [r4, #16]
 8003ec2:	bf0c      	ite	eq
 8003ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec8:	2500      	movne	r5, #0
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	bfc4      	itt	gt
 8003ece:	1a9b      	subgt	r3, r3, r2
 8003ed0:	18ed      	addgt	r5, r5, r3
 8003ed2:	2600      	movs	r6, #0
 8003ed4:	341a      	adds	r4, #26
 8003ed6:	42b5      	cmp	r5, r6
 8003ed8:	d11a      	bne.n	8003f10 <_printf_common+0xc8>
 8003eda:	2000      	movs	r0, #0
 8003edc:	e008      	b.n	8003ef0 <_printf_common+0xa8>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	47c0      	blx	r8
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d103      	bne.n	8003ef4 <_printf_common+0xac>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	e7c6      	b.n	8003e86 <_printf_common+0x3e>
 8003ef8:	18e1      	adds	r1, r4, r3
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f02:	4422      	add	r2, r4
 8003f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	e7c7      	b.n	8003ea0 <_printf_common+0x58>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4622      	mov	r2, r4
 8003f14:	4649      	mov	r1, r9
 8003f16:	4638      	mov	r0, r7
 8003f18:	47c0      	blx	r8
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d0e6      	beq.n	8003eec <_printf_common+0xa4>
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7d9      	b.n	8003ed6 <_printf_common+0x8e>
	...

08003f24 <_printf_i>:
 8003f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	7e0f      	ldrb	r7, [r1, #24]
 8003f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f2c:	2f78      	cmp	r7, #120	; 0x78
 8003f2e:	4691      	mov	r9, r2
 8003f30:	4680      	mov	r8, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	469a      	mov	sl, r3
 8003f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f3a:	d807      	bhi.n	8003f4c <_printf_i+0x28>
 8003f3c:	2f62      	cmp	r7, #98	; 0x62
 8003f3e:	d80a      	bhi.n	8003f56 <_printf_i+0x32>
 8003f40:	2f00      	cmp	r7, #0
 8003f42:	f000 80d8 	beq.w	80040f6 <_printf_i+0x1d2>
 8003f46:	2f58      	cmp	r7, #88	; 0x58
 8003f48:	f000 80a3 	beq.w	8004092 <_printf_i+0x16e>
 8003f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f54:	e03a      	b.n	8003fcc <_printf_i+0xa8>
 8003f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f5a:	2b15      	cmp	r3, #21
 8003f5c:	d8f6      	bhi.n	8003f4c <_printf_i+0x28>
 8003f5e:	a101      	add	r1, pc, #4	; (adr r1, 8003f64 <_printf_i+0x40>)
 8003f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f64:	08003fbd 	.word	0x08003fbd
 8003f68:	08003fd1 	.word	0x08003fd1
 8003f6c:	08003f4d 	.word	0x08003f4d
 8003f70:	08003f4d 	.word	0x08003f4d
 8003f74:	08003f4d 	.word	0x08003f4d
 8003f78:	08003f4d 	.word	0x08003f4d
 8003f7c:	08003fd1 	.word	0x08003fd1
 8003f80:	08003f4d 	.word	0x08003f4d
 8003f84:	08003f4d 	.word	0x08003f4d
 8003f88:	08003f4d 	.word	0x08003f4d
 8003f8c:	08003f4d 	.word	0x08003f4d
 8003f90:	080040dd 	.word	0x080040dd
 8003f94:	08004001 	.word	0x08004001
 8003f98:	080040bf 	.word	0x080040bf
 8003f9c:	08003f4d 	.word	0x08003f4d
 8003fa0:	08003f4d 	.word	0x08003f4d
 8003fa4:	080040ff 	.word	0x080040ff
 8003fa8:	08003f4d 	.word	0x08003f4d
 8003fac:	08004001 	.word	0x08004001
 8003fb0:	08003f4d 	.word	0x08003f4d
 8003fb4:	08003f4d 	.word	0x08003f4d
 8003fb8:	080040c7 	.word	0x080040c7
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	1d1a      	adds	r2, r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	602a      	str	r2, [r5, #0]
 8003fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0a3      	b.n	8004118 <_printf_i+0x1f4>
 8003fd0:	6820      	ldr	r0, [r4, #0]
 8003fd2:	6829      	ldr	r1, [r5, #0]
 8003fd4:	0606      	lsls	r6, r0, #24
 8003fd6:	f101 0304 	add.w	r3, r1, #4
 8003fda:	d50a      	bpl.n	8003ff2 <_printf_i+0xce>
 8003fdc:	680e      	ldr	r6, [r1, #0]
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	2e00      	cmp	r6, #0
 8003fe2:	da03      	bge.n	8003fec <_printf_i+0xc8>
 8003fe4:	232d      	movs	r3, #45	; 0x2d
 8003fe6:	4276      	negs	r6, r6
 8003fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fec:	485e      	ldr	r0, [pc, #376]	; (8004168 <_printf_i+0x244>)
 8003fee:	230a      	movs	r3, #10
 8003ff0:	e019      	b.n	8004026 <_printf_i+0x102>
 8003ff2:	680e      	ldr	r6, [r1, #0]
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ffa:	bf18      	it	ne
 8003ffc:	b236      	sxthne	r6, r6
 8003ffe:	e7ef      	b.n	8003fe0 <_printf_i+0xbc>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	1d19      	adds	r1, r3, #4
 8004006:	6029      	str	r1, [r5, #0]
 8004008:	0601      	lsls	r1, r0, #24
 800400a:	d501      	bpl.n	8004010 <_printf_i+0xec>
 800400c:	681e      	ldr	r6, [r3, #0]
 800400e:	e002      	b.n	8004016 <_printf_i+0xf2>
 8004010:	0646      	lsls	r6, r0, #25
 8004012:	d5fb      	bpl.n	800400c <_printf_i+0xe8>
 8004014:	881e      	ldrh	r6, [r3, #0]
 8004016:	4854      	ldr	r0, [pc, #336]	; (8004168 <_printf_i+0x244>)
 8004018:	2f6f      	cmp	r7, #111	; 0x6f
 800401a:	bf0c      	ite	eq
 800401c:	2308      	moveq	r3, #8
 800401e:	230a      	movne	r3, #10
 8004020:	2100      	movs	r1, #0
 8004022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004026:	6865      	ldr	r5, [r4, #4]
 8004028:	60a5      	str	r5, [r4, #8]
 800402a:	2d00      	cmp	r5, #0
 800402c:	bfa2      	ittt	ge
 800402e:	6821      	ldrge	r1, [r4, #0]
 8004030:	f021 0104 	bicge.w	r1, r1, #4
 8004034:	6021      	strge	r1, [r4, #0]
 8004036:	b90e      	cbnz	r6, 800403c <_printf_i+0x118>
 8004038:	2d00      	cmp	r5, #0
 800403a:	d04d      	beq.n	80040d8 <_printf_i+0x1b4>
 800403c:	4615      	mov	r5, r2
 800403e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004042:	fb03 6711 	mls	r7, r3, r1, r6
 8004046:	5dc7      	ldrb	r7, [r0, r7]
 8004048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800404c:	4637      	mov	r7, r6
 800404e:	42bb      	cmp	r3, r7
 8004050:	460e      	mov	r6, r1
 8004052:	d9f4      	bls.n	800403e <_printf_i+0x11a>
 8004054:	2b08      	cmp	r3, #8
 8004056:	d10b      	bne.n	8004070 <_printf_i+0x14c>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	07de      	lsls	r6, r3, #31
 800405c:	d508      	bpl.n	8004070 <_printf_i+0x14c>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	6861      	ldr	r1, [r4, #4]
 8004062:	4299      	cmp	r1, r3
 8004064:	bfde      	ittt	le
 8004066:	2330      	movle	r3, #48	; 0x30
 8004068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800406c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004070:	1b52      	subs	r2, r2, r5
 8004072:	6122      	str	r2, [r4, #16]
 8004074:	f8cd a000 	str.w	sl, [sp]
 8004078:	464b      	mov	r3, r9
 800407a:	aa03      	add	r2, sp, #12
 800407c:	4621      	mov	r1, r4
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fee2 	bl	8003e48 <_printf_common>
 8004084:	3001      	adds	r0, #1
 8004086:	d14c      	bne.n	8004122 <_printf_i+0x1fe>
 8004088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800408c:	b004      	add	sp, #16
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004092:	4835      	ldr	r0, [pc, #212]	; (8004168 <_printf_i+0x244>)
 8004094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004098:	6829      	ldr	r1, [r5, #0]
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	f851 6b04 	ldr.w	r6, [r1], #4
 80040a0:	6029      	str	r1, [r5, #0]
 80040a2:	061d      	lsls	r5, r3, #24
 80040a4:	d514      	bpl.n	80040d0 <_printf_i+0x1ac>
 80040a6:	07df      	lsls	r7, r3, #31
 80040a8:	bf44      	itt	mi
 80040aa:	f043 0320 	orrmi.w	r3, r3, #32
 80040ae:	6023      	strmi	r3, [r4, #0]
 80040b0:	b91e      	cbnz	r6, 80040ba <_printf_i+0x196>
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	f023 0320 	bic.w	r3, r3, #32
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	2310      	movs	r3, #16
 80040bc:	e7b0      	b.n	8004020 <_printf_i+0xfc>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	f043 0320 	orr.w	r3, r3, #32
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	2378      	movs	r3, #120	; 0x78
 80040c8:	4828      	ldr	r0, [pc, #160]	; (800416c <_printf_i+0x248>)
 80040ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ce:	e7e3      	b.n	8004098 <_printf_i+0x174>
 80040d0:	0659      	lsls	r1, r3, #25
 80040d2:	bf48      	it	mi
 80040d4:	b2b6      	uxthmi	r6, r6
 80040d6:	e7e6      	b.n	80040a6 <_printf_i+0x182>
 80040d8:	4615      	mov	r5, r2
 80040da:	e7bb      	b.n	8004054 <_printf_i+0x130>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	6826      	ldr	r6, [r4, #0]
 80040e0:	6961      	ldr	r1, [r4, #20]
 80040e2:	1d18      	adds	r0, r3, #4
 80040e4:	6028      	str	r0, [r5, #0]
 80040e6:	0635      	lsls	r5, r6, #24
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	d501      	bpl.n	80040f0 <_printf_i+0x1cc>
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <_printf_i+0x1d2>
 80040f0:	0670      	lsls	r0, r6, #25
 80040f2:	d5fb      	bpl.n	80040ec <_printf_i+0x1c8>
 80040f4:	8019      	strh	r1, [r3, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	4615      	mov	r5, r2
 80040fc:	e7ba      	b.n	8004074 <_printf_i+0x150>
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	1d1a      	adds	r2, r3, #4
 8004102:	602a      	str	r2, [r5, #0]
 8004104:	681d      	ldr	r5, [r3, #0]
 8004106:	6862      	ldr	r2, [r4, #4]
 8004108:	2100      	movs	r1, #0
 800410a:	4628      	mov	r0, r5
 800410c:	f7fc f888 	bl	8000220 <memchr>
 8004110:	b108      	cbz	r0, 8004116 <_printf_i+0x1f2>
 8004112:	1b40      	subs	r0, r0, r5
 8004114:	6060      	str	r0, [r4, #4]
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	6123      	str	r3, [r4, #16]
 800411a:	2300      	movs	r3, #0
 800411c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004120:	e7a8      	b.n	8004074 <_printf_i+0x150>
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	462a      	mov	r2, r5
 8004126:	4649      	mov	r1, r9
 8004128:	4640      	mov	r0, r8
 800412a:	47d0      	blx	sl
 800412c:	3001      	adds	r0, #1
 800412e:	d0ab      	beq.n	8004088 <_printf_i+0x164>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	079b      	lsls	r3, r3, #30
 8004134:	d413      	bmi.n	800415e <_printf_i+0x23a>
 8004136:	68e0      	ldr	r0, [r4, #12]
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	4298      	cmp	r0, r3
 800413c:	bfb8      	it	lt
 800413e:	4618      	movlt	r0, r3
 8004140:	e7a4      	b.n	800408c <_printf_i+0x168>
 8004142:	2301      	movs	r3, #1
 8004144:	4632      	mov	r2, r6
 8004146:	4649      	mov	r1, r9
 8004148:	4640      	mov	r0, r8
 800414a:	47d0      	blx	sl
 800414c:	3001      	adds	r0, #1
 800414e:	d09b      	beq.n	8004088 <_printf_i+0x164>
 8004150:	3501      	adds	r5, #1
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	9903      	ldr	r1, [sp, #12]
 8004156:	1a5b      	subs	r3, r3, r1
 8004158:	42ab      	cmp	r3, r5
 800415a:	dcf2      	bgt.n	8004142 <_printf_i+0x21e>
 800415c:	e7eb      	b.n	8004136 <_printf_i+0x212>
 800415e:	2500      	movs	r5, #0
 8004160:	f104 0619 	add.w	r6, r4, #25
 8004164:	e7f5      	b.n	8004152 <_printf_i+0x22e>
 8004166:	bf00      	nop
 8004168:	08004ac9 	.word	0x08004ac9
 800416c:	08004ada 	.word	0x08004ada

08004170 <_sbrk_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	; (800418c <_sbrk_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fd f864 	bl	8001248 <_sbrk>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_sbrk_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_sbrk_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000174 	.word	0x20000174

08004190 <__swbuf_r>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	460e      	mov	r6, r1
 8004194:	4614      	mov	r4, r2
 8004196:	4605      	mov	r5, r0
 8004198:	b118      	cbz	r0, 80041a2 <__swbuf_r+0x12>
 800419a:	6983      	ldr	r3, [r0, #24]
 800419c:	b90b      	cbnz	r3, 80041a2 <__swbuf_r+0x12>
 800419e:	f000 f9d9 	bl	8004554 <__sinit>
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <__swbuf_r+0x98>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	d12b      	bne.n	8004200 <__swbuf_r+0x70>
 80041a8:	686c      	ldr	r4, [r5, #4]
 80041aa:	69a3      	ldr	r3, [r4, #24]
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	071a      	lsls	r2, r3, #28
 80041b2:	d52f      	bpl.n	8004214 <__swbuf_r+0x84>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	b36b      	cbz	r3, 8004214 <__swbuf_r+0x84>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	1ac0      	subs	r0, r0, r3
 80041be:	6963      	ldr	r3, [r4, #20]
 80041c0:	b2f6      	uxtb	r6, r6
 80041c2:	4283      	cmp	r3, r0
 80041c4:	4637      	mov	r7, r6
 80041c6:	dc04      	bgt.n	80041d2 <__swbuf_r+0x42>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f92e 	bl	800442c <_fflush_r>
 80041d0:	bb30      	cbnz	r0, 8004220 <__swbuf_r+0x90>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	6022      	str	r2, [r4, #0]
 80041de:	701e      	strb	r6, [r3, #0]
 80041e0:	6963      	ldr	r3, [r4, #20]
 80041e2:	3001      	adds	r0, #1
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d004      	beq.n	80041f2 <__swbuf_r+0x62>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	07db      	lsls	r3, r3, #31
 80041ec:	d506      	bpl.n	80041fc <__swbuf_r+0x6c>
 80041ee:	2e0a      	cmp	r6, #10
 80041f0:	d104      	bne.n	80041fc <__swbuf_r+0x6c>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 f919 	bl	800442c <_fflush_r>
 80041fa:	b988      	cbnz	r0, 8004220 <__swbuf_r+0x90>
 80041fc:	4638      	mov	r0, r7
 80041fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <__swbuf_r+0x9c>)
 8004202:	429c      	cmp	r4, r3
 8004204:	d101      	bne.n	800420a <__swbuf_r+0x7a>
 8004206:	68ac      	ldr	r4, [r5, #8]
 8004208:	e7cf      	b.n	80041aa <__swbuf_r+0x1a>
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <__swbuf_r+0xa0>)
 800420c:	429c      	cmp	r4, r3
 800420e:	bf08      	it	eq
 8004210:	68ec      	ldreq	r4, [r5, #12]
 8004212:	e7ca      	b.n	80041aa <__swbuf_r+0x1a>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f000 f80c 	bl	8004234 <__swsetup_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	d0cb      	beq.n	80041b8 <__swbuf_r+0x28>
 8004220:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004224:	e7ea      	b.n	80041fc <__swbuf_r+0x6c>
 8004226:	bf00      	nop
 8004228:	08004b0c 	.word	0x08004b0c
 800422c:	08004b2c 	.word	0x08004b2c
 8004230:	08004aec 	.word	0x08004aec

08004234 <__swsetup_r>:
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <__swsetup_r+0xcc>)
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	b125      	cbz	r5, 800424a <__swsetup_r+0x16>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	b913      	cbnz	r3, 800424a <__swsetup_r+0x16>
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f985 	bl	8004554 <__sinit>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <__swsetup_r+0xd0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d10f      	bne.n	8004270 <__swsetup_r+0x3c>
 8004250:	686c      	ldr	r4, [r5, #4]
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004258:	0719      	lsls	r1, r3, #28
 800425a:	d42c      	bmi.n	80042b6 <__swsetup_r+0x82>
 800425c:	06dd      	lsls	r5, r3, #27
 800425e:	d411      	bmi.n	8004284 <__swsetup_r+0x50>
 8004260:	2309      	movs	r3, #9
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800426e:	e03e      	b.n	80042ee <__swsetup_r+0xba>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <__swsetup_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <__swsetup_r+0x46>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7eb      	b.n	8004252 <__swsetup_r+0x1e>
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <__swsetup_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7e6      	b.n	8004252 <__swsetup_r+0x1e>
 8004284:	0758      	lsls	r0, r3, #29
 8004286:	d512      	bpl.n	80042ae <__swsetup_r+0x7a>
 8004288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428a:	b141      	cbz	r1, 800429e <__swsetup_r+0x6a>
 800428c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004290:	4299      	cmp	r1, r3
 8004292:	d002      	beq.n	800429a <__swsetup_r+0x66>
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff fb9d 	bl	80039d4 <_free_r>
 800429a:	2300      	movs	r3, #0
 800429c:	6363      	str	r3, [r4, #52]	; 0x34
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b94b      	cbnz	r3, 80042ce <__swsetup_r+0x9a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d003      	beq.n	80042ce <__swsetup_r+0x9a>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4630      	mov	r0, r6
 80042ca:	f000 fa09 	bl	80046e0 <__smakebuf_r>
 80042ce:	89a0      	ldrh	r0, [r4, #12]
 80042d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d4:	f010 0301 	ands.w	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <__swsetup_r+0xbc>
 80042da:	2300      	movs	r3, #0
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	425b      	negs	r3, r3
 80042e2:	61a3      	str	r3, [r4, #24]
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	b943      	cbnz	r3, 80042fa <__swsetup_r+0xc6>
 80042e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ec:	d1ba      	bne.n	8004264 <__swsetup_r+0x30>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	0781      	lsls	r1, r0, #30
 80042f2:	bf58      	it	pl
 80042f4:	6963      	ldrpl	r3, [r4, #20]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	e7f4      	b.n	80042e4 <__swsetup_r+0xb0>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7f7      	b.n	80042ee <__swsetup_r+0xba>
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c
 8004304:	08004b0c 	.word	0x08004b0c
 8004308:	08004b2c 	.word	0x08004b2c
 800430c:	08004aec 	.word	0x08004aec

08004310 <abort>:
 8004310:	b508      	push	{r3, lr}
 8004312:	2006      	movs	r0, #6
 8004314:	f000 fa58 	bl	80047c8 <raise>
 8004318:	2001      	movs	r0, #1
 800431a:	f7fc ff1d 	bl	8001158 <_exit>
	...

08004320 <__sflush_r>:
 8004320:	898a      	ldrh	r2, [r1, #12]
 8004322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004326:	4605      	mov	r5, r0
 8004328:	0710      	lsls	r0, r2, #28
 800432a:	460c      	mov	r4, r1
 800432c:	d458      	bmi.n	80043e0 <__sflush_r+0xc0>
 800432e:	684b      	ldr	r3, [r1, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	dc05      	bgt.n	8004340 <__sflush_r+0x20>
 8004334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	dc02      	bgt.n	8004340 <__sflush_r+0x20>
 800433a:	2000      	movs	r0, #0
 800433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004342:	2e00      	cmp	r6, #0
 8004344:	d0f9      	beq.n	800433a <__sflush_r+0x1a>
 8004346:	2300      	movs	r3, #0
 8004348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800434c:	682f      	ldr	r7, [r5, #0]
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	d032      	beq.n	80043b8 <__sflush_r+0x98>
 8004352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	075a      	lsls	r2, r3, #29
 8004358:	d505      	bpl.n	8004366 <__sflush_r+0x46>
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004360:	b10b      	cbz	r3, 8004366 <__sflush_r+0x46>
 8004362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004364:	1ac0      	subs	r0, r0, r3
 8004366:	2300      	movs	r3, #0
 8004368:	4602      	mov	r2, r0
 800436a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800436c:	6a21      	ldr	r1, [r4, #32]
 800436e:	4628      	mov	r0, r5
 8004370:	47b0      	blx	r6
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	d106      	bne.n	8004386 <__sflush_r+0x66>
 8004378:	6829      	ldr	r1, [r5, #0]
 800437a:	291d      	cmp	r1, #29
 800437c:	d82c      	bhi.n	80043d8 <__sflush_r+0xb8>
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <__sflush_r+0x108>)
 8004380:	40ca      	lsrs	r2, r1
 8004382:	07d6      	lsls	r6, r2, #31
 8004384:	d528      	bpl.n	80043d8 <__sflush_r+0xb8>
 8004386:	2200      	movs	r2, #0
 8004388:	6062      	str	r2, [r4, #4]
 800438a:	04d9      	lsls	r1, r3, #19
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	d504      	bpl.n	800439c <__sflush_r+0x7c>
 8004392:	1c42      	adds	r2, r0, #1
 8004394:	d101      	bne.n	800439a <__sflush_r+0x7a>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	b903      	cbnz	r3, 800439c <__sflush_r+0x7c>
 800439a:	6560      	str	r0, [r4, #84]	; 0x54
 800439c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800439e:	602f      	str	r7, [r5, #0]
 80043a0:	2900      	cmp	r1, #0
 80043a2:	d0ca      	beq.n	800433a <__sflush_r+0x1a>
 80043a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043a8:	4299      	cmp	r1, r3
 80043aa:	d002      	beq.n	80043b2 <__sflush_r+0x92>
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff fb11 	bl	80039d4 <_free_r>
 80043b2:	2000      	movs	r0, #0
 80043b4:	6360      	str	r0, [r4, #52]	; 0x34
 80043b6:	e7c1      	b.n	800433c <__sflush_r+0x1c>
 80043b8:	6a21      	ldr	r1, [r4, #32]
 80043ba:	2301      	movs	r3, #1
 80043bc:	4628      	mov	r0, r5
 80043be:	47b0      	blx	r6
 80043c0:	1c41      	adds	r1, r0, #1
 80043c2:	d1c7      	bne.n	8004354 <__sflush_r+0x34>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0c4      	beq.n	8004354 <__sflush_r+0x34>
 80043ca:	2b1d      	cmp	r3, #29
 80043cc:	d001      	beq.n	80043d2 <__sflush_r+0xb2>
 80043ce:	2b16      	cmp	r3, #22
 80043d0:	d101      	bne.n	80043d6 <__sflush_r+0xb6>
 80043d2:	602f      	str	r7, [r5, #0]
 80043d4:	e7b1      	b.n	800433a <__sflush_r+0x1a>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	e7ad      	b.n	800433c <__sflush_r+0x1c>
 80043e0:	690f      	ldr	r7, [r1, #16]
 80043e2:	2f00      	cmp	r7, #0
 80043e4:	d0a9      	beq.n	800433a <__sflush_r+0x1a>
 80043e6:	0793      	lsls	r3, r2, #30
 80043e8:	680e      	ldr	r6, [r1, #0]
 80043ea:	bf08      	it	eq
 80043ec:	694b      	ldreq	r3, [r1, #20]
 80043ee:	600f      	str	r7, [r1, #0]
 80043f0:	bf18      	it	ne
 80043f2:	2300      	movne	r3, #0
 80043f4:	eba6 0807 	sub.w	r8, r6, r7
 80043f8:	608b      	str	r3, [r1, #8]
 80043fa:	f1b8 0f00 	cmp.w	r8, #0
 80043fe:	dd9c      	ble.n	800433a <__sflush_r+0x1a>
 8004400:	6a21      	ldr	r1, [r4, #32]
 8004402:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004404:	4643      	mov	r3, r8
 8004406:	463a      	mov	r2, r7
 8004408:	4628      	mov	r0, r5
 800440a:	47b0      	blx	r6
 800440c:	2800      	cmp	r0, #0
 800440e:	dc06      	bgt.n	800441e <__sflush_r+0xfe>
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004416:	81a3      	strh	r3, [r4, #12]
 8004418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800441c:	e78e      	b.n	800433c <__sflush_r+0x1c>
 800441e:	4407      	add	r7, r0
 8004420:	eba8 0800 	sub.w	r8, r8, r0
 8004424:	e7e9      	b.n	80043fa <__sflush_r+0xda>
 8004426:	bf00      	nop
 8004428:	20400001 	.word	0x20400001

0800442c <_fflush_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	690b      	ldr	r3, [r1, #16]
 8004430:	4605      	mov	r5, r0
 8004432:	460c      	mov	r4, r1
 8004434:	b913      	cbnz	r3, 800443c <_fflush_r+0x10>
 8004436:	2500      	movs	r5, #0
 8004438:	4628      	mov	r0, r5
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	b118      	cbz	r0, 8004446 <_fflush_r+0x1a>
 800443e:	6983      	ldr	r3, [r0, #24]
 8004440:	b90b      	cbnz	r3, 8004446 <_fflush_r+0x1a>
 8004442:	f000 f887 	bl	8004554 <__sinit>
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <_fflush_r+0x6c>)
 8004448:	429c      	cmp	r4, r3
 800444a:	d11b      	bne.n	8004484 <_fflush_r+0x58>
 800444c:	686c      	ldr	r4, [r5, #4]
 800444e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ef      	beq.n	8004436 <_fflush_r+0xa>
 8004456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004458:	07d0      	lsls	r0, r2, #31
 800445a:	d404      	bmi.n	8004466 <_fflush_r+0x3a>
 800445c:	0599      	lsls	r1, r3, #22
 800445e:	d402      	bmi.n	8004466 <_fflush_r+0x3a>
 8004460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004462:	f000 f915 	bl	8004690 <__retarget_lock_acquire_recursive>
 8004466:	4628      	mov	r0, r5
 8004468:	4621      	mov	r1, r4
 800446a:	f7ff ff59 	bl	8004320 <__sflush_r>
 800446e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004470:	07da      	lsls	r2, r3, #31
 8004472:	4605      	mov	r5, r0
 8004474:	d4e0      	bmi.n	8004438 <_fflush_r+0xc>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d4dd      	bmi.n	8004438 <_fflush_r+0xc>
 800447c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800447e:	f000 f908 	bl	8004692 <__retarget_lock_release_recursive>
 8004482:	e7d9      	b.n	8004438 <_fflush_r+0xc>
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <_fflush_r+0x70>)
 8004486:	429c      	cmp	r4, r3
 8004488:	d101      	bne.n	800448e <_fflush_r+0x62>
 800448a:	68ac      	ldr	r4, [r5, #8]
 800448c:	e7df      	b.n	800444e <_fflush_r+0x22>
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <_fflush_r+0x74>)
 8004490:	429c      	cmp	r4, r3
 8004492:	bf08      	it	eq
 8004494:	68ec      	ldreq	r4, [r5, #12]
 8004496:	e7da      	b.n	800444e <_fflush_r+0x22>
 8004498:	08004b0c 	.word	0x08004b0c
 800449c:	08004b2c 	.word	0x08004b2c
 80044a0:	08004aec 	.word	0x08004aec

080044a4 <std>:
 80044a4:	2300      	movs	r3, #0
 80044a6:	b510      	push	{r4, lr}
 80044a8:	4604      	mov	r4, r0
 80044aa:	e9c0 3300 	strd	r3, r3, [r0]
 80044ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044b2:	6083      	str	r3, [r0, #8]
 80044b4:	8181      	strh	r1, [r0, #12]
 80044b6:	6643      	str	r3, [r0, #100]	; 0x64
 80044b8:	81c2      	strh	r2, [r0, #14]
 80044ba:	6183      	str	r3, [r0, #24]
 80044bc:	4619      	mov	r1, r3
 80044be:	2208      	movs	r2, #8
 80044c0:	305c      	adds	r0, #92	; 0x5c
 80044c2:	f7ff f9e3 	bl	800388c <memset>
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x38>)
 80044c8:	6263      	str	r3, [r4, #36]	; 0x24
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <std+0x3c>)
 80044cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std+0x40>)
 80044d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <std+0x44>)
 80044d4:	6224      	str	r4, [r4, #32]
 80044d6:	6323      	str	r3, [r4, #48]	; 0x30
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	bf00      	nop
 80044dc:	08004801 	.word	0x08004801
 80044e0:	08004823 	.word	0x08004823
 80044e4:	0800485b 	.word	0x0800485b
 80044e8:	0800487f 	.word	0x0800487f

080044ec <_cleanup_r>:
 80044ec:	4901      	ldr	r1, [pc, #4]	; (80044f4 <_cleanup_r+0x8>)
 80044ee:	f000 b8af 	b.w	8004650 <_fwalk_reent>
 80044f2:	bf00      	nop
 80044f4:	0800442d 	.word	0x0800442d

080044f8 <__sfmoreglue>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	2268      	movs	r2, #104	; 0x68
 80044fc:	1e4d      	subs	r5, r1, #1
 80044fe:	4355      	muls	r5, r2
 8004500:	460e      	mov	r6, r1
 8004502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004506:	f7ff fad1 	bl	8003aac <_malloc_r>
 800450a:	4604      	mov	r4, r0
 800450c:	b140      	cbz	r0, 8004520 <__sfmoreglue+0x28>
 800450e:	2100      	movs	r1, #0
 8004510:	e9c0 1600 	strd	r1, r6, [r0]
 8004514:	300c      	adds	r0, #12
 8004516:	60a0      	str	r0, [r4, #8]
 8004518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800451c:	f7ff f9b6 	bl	800388c <memset>
 8004520:	4620      	mov	r0, r4
 8004522:	bd70      	pop	{r4, r5, r6, pc}

08004524 <__sfp_lock_acquire>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sfp_lock_acquire+0x8>)
 8004526:	f000 b8b3 	b.w	8004690 <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	20000171 	.word	0x20000171

08004530 <__sfp_lock_release>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sfp_lock_release+0x8>)
 8004532:	f000 b8ae 	b.w	8004692 <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	20000171 	.word	0x20000171

0800453c <__sinit_lock_acquire>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__sinit_lock_acquire+0x8>)
 800453e:	f000 b8a7 	b.w	8004690 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	20000172 	.word	0x20000172

08004548 <__sinit_lock_release>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__sinit_lock_release+0x8>)
 800454a:	f000 b8a2 	b.w	8004692 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	20000172 	.word	0x20000172

08004554 <__sinit>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	f7ff fff0 	bl	800453c <__sinit_lock_acquire>
 800455c:	69a3      	ldr	r3, [r4, #24]
 800455e:	b11b      	cbz	r3, 8004568 <__sinit+0x14>
 8004560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004564:	f7ff bff0 	b.w	8004548 <__sinit_lock_release>
 8004568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800456c:	6523      	str	r3, [r4, #80]	; 0x50
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <__sinit+0x68>)
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <__sinit+0x6c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62a2      	str	r2, [r4, #40]	; 0x28
 8004576:	42a3      	cmp	r3, r4
 8004578:	bf04      	itt	eq
 800457a:	2301      	moveq	r3, #1
 800457c:	61a3      	streq	r3, [r4, #24]
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f820 	bl	80045c4 <__sfp>
 8004584:	6060      	str	r0, [r4, #4]
 8004586:	4620      	mov	r0, r4
 8004588:	f000 f81c 	bl	80045c4 <__sfp>
 800458c:	60a0      	str	r0, [r4, #8]
 800458e:	4620      	mov	r0, r4
 8004590:	f000 f818 	bl	80045c4 <__sfp>
 8004594:	2200      	movs	r2, #0
 8004596:	60e0      	str	r0, [r4, #12]
 8004598:	2104      	movs	r1, #4
 800459a:	6860      	ldr	r0, [r4, #4]
 800459c:	f7ff ff82 	bl	80044a4 <std>
 80045a0:	68a0      	ldr	r0, [r4, #8]
 80045a2:	2201      	movs	r2, #1
 80045a4:	2109      	movs	r1, #9
 80045a6:	f7ff ff7d 	bl	80044a4 <std>
 80045aa:	68e0      	ldr	r0, [r4, #12]
 80045ac:	2202      	movs	r2, #2
 80045ae:	2112      	movs	r1, #18
 80045b0:	f7ff ff78 	bl	80044a4 <std>
 80045b4:	2301      	movs	r3, #1
 80045b6:	61a3      	str	r3, [r4, #24]
 80045b8:	e7d2      	b.n	8004560 <__sinit+0xc>
 80045ba:	bf00      	nop
 80045bc:	08004a04 	.word	0x08004a04
 80045c0:	080044ed 	.word	0x080044ed

080045c4 <__sfp>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	4607      	mov	r7, r0
 80045c8:	f7ff ffac 	bl	8004524 <__sfp_lock_acquire>
 80045cc:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <__sfp+0x84>)
 80045ce:	681e      	ldr	r6, [r3, #0]
 80045d0:	69b3      	ldr	r3, [r6, #24]
 80045d2:	b913      	cbnz	r3, 80045da <__sfp+0x16>
 80045d4:	4630      	mov	r0, r6
 80045d6:	f7ff ffbd 	bl	8004554 <__sinit>
 80045da:	3648      	adds	r6, #72	; 0x48
 80045dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	d503      	bpl.n	80045ec <__sfp+0x28>
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	b30b      	cbz	r3, 800462c <__sfp+0x68>
 80045e8:	6836      	ldr	r6, [r6, #0]
 80045ea:	e7f7      	b.n	80045dc <__sfp+0x18>
 80045ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045f0:	b9d5      	cbnz	r5, 8004628 <__sfp+0x64>
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <__sfp+0x88>)
 80045f4:	60e3      	str	r3, [r4, #12]
 80045f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045fa:	6665      	str	r5, [r4, #100]	; 0x64
 80045fc:	f000 f847 	bl	800468e <__retarget_lock_init_recursive>
 8004600:	f7ff ff96 	bl	8004530 <__sfp_lock_release>
 8004604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800460c:	6025      	str	r5, [r4, #0]
 800460e:	61a5      	str	r5, [r4, #24]
 8004610:	2208      	movs	r2, #8
 8004612:	4629      	mov	r1, r5
 8004614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004618:	f7ff f938 	bl	800388c <memset>
 800461c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004624:	4620      	mov	r0, r4
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004628:	3468      	adds	r4, #104	; 0x68
 800462a:	e7d9      	b.n	80045e0 <__sfp+0x1c>
 800462c:	2104      	movs	r1, #4
 800462e:	4638      	mov	r0, r7
 8004630:	f7ff ff62 	bl	80044f8 <__sfmoreglue>
 8004634:	4604      	mov	r4, r0
 8004636:	6030      	str	r0, [r6, #0]
 8004638:	2800      	cmp	r0, #0
 800463a:	d1d5      	bne.n	80045e8 <__sfp+0x24>
 800463c:	f7ff ff78 	bl	8004530 <__sfp_lock_release>
 8004640:	230c      	movs	r3, #12
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	e7ee      	b.n	8004624 <__sfp+0x60>
 8004646:	bf00      	nop
 8004648:	08004a04 	.word	0x08004a04
 800464c:	ffff0001 	.word	0xffff0001

08004650 <_fwalk_reent>:
 8004650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004654:	4606      	mov	r6, r0
 8004656:	4688      	mov	r8, r1
 8004658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800465c:	2700      	movs	r7, #0
 800465e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004662:	f1b9 0901 	subs.w	r9, r9, #1
 8004666:	d505      	bpl.n	8004674 <_fwalk_reent+0x24>
 8004668:	6824      	ldr	r4, [r4, #0]
 800466a:	2c00      	cmp	r4, #0
 800466c:	d1f7      	bne.n	800465e <_fwalk_reent+0xe>
 800466e:	4638      	mov	r0, r7
 8004670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d907      	bls.n	800468a <_fwalk_reent+0x3a>
 800467a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800467e:	3301      	adds	r3, #1
 8004680:	d003      	beq.n	800468a <_fwalk_reent+0x3a>
 8004682:	4629      	mov	r1, r5
 8004684:	4630      	mov	r0, r6
 8004686:	47c0      	blx	r8
 8004688:	4307      	orrs	r7, r0
 800468a:	3568      	adds	r5, #104	; 0x68
 800468c:	e7e9      	b.n	8004662 <_fwalk_reent+0x12>

0800468e <__retarget_lock_init_recursive>:
 800468e:	4770      	bx	lr

08004690 <__retarget_lock_acquire_recursive>:
 8004690:	4770      	bx	lr

08004692 <__retarget_lock_release_recursive>:
 8004692:	4770      	bx	lr

08004694 <__swhatbuf_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	460e      	mov	r6, r1
 8004698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800469c:	2900      	cmp	r1, #0
 800469e:	b096      	sub	sp, #88	; 0x58
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	da08      	bge.n	80046b8 <__swhatbuf_r+0x24>
 80046a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	602a      	str	r2, [r5, #0]
 80046ae:	061a      	lsls	r2, r3, #24
 80046b0:	d410      	bmi.n	80046d4 <__swhatbuf_r+0x40>
 80046b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b6:	e00e      	b.n	80046d6 <__swhatbuf_r+0x42>
 80046b8:	466a      	mov	r2, sp
 80046ba:	f000 f907 	bl	80048cc <_fstat_r>
 80046be:	2800      	cmp	r0, #0
 80046c0:	dbf1      	blt.n	80046a6 <__swhatbuf_r+0x12>
 80046c2:	9a01      	ldr	r2, [sp, #4]
 80046c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046cc:	425a      	negs	r2, r3
 80046ce:	415a      	adcs	r2, r3
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	e7ee      	b.n	80046b2 <__swhatbuf_r+0x1e>
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	2000      	movs	r0, #0
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	b016      	add	sp, #88	; 0x58
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080046e0 <__smakebuf_r>:
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046e4:	079d      	lsls	r5, r3, #30
 80046e6:	4606      	mov	r6, r0
 80046e8:	460c      	mov	r4, r1
 80046ea:	d507      	bpl.n	80046fc <__smakebuf_r+0x1c>
 80046ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	6123      	str	r3, [r4, #16]
 80046f4:	2301      	movs	r3, #1
 80046f6:	6163      	str	r3, [r4, #20]
 80046f8:	b002      	add	sp, #8
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	ab01      	add	r3, sp, #4
 80046fe:	466a      	mov	r2, sp
 8004700:	f7ff ffc8 	bl	8004694 <__swhatbuf_r>
 8004704:	9900      	ldr	r1, [sp, #0]
 8004706:	4605      	mov	r5, r0
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff f9cf 	bl	8003aac <_malloc_r>
 800470e:	b948      	cbnz	r0, 8004724 <__smakebuf_r+0x44>
 8004710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004714:	059a      	lsls	r2, r3, #22
 8004716:	d4ef      	bmi.n	80046f8 <__smakebuf_r+0x18>
 8004718:	f023 0303 	bic.w	r3, r3, #3
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	e7e3      	b.n	80046ec <__smakebuf_r+0xc>
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <__smakebuf_r+0x7c>)
 8004726:	62b3      	str	r3, [r6, #40]	; 0x28
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	6020      	str	r0, [r4, #0]
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	9b00      	ldr	r3, [sp, #0]
 8004734:	6163      	str	r3, [r4, #20]
 8004736:	9b01      	ldr	r3, [sp, #4]
 8004738:	6120      	str	r0, [r4, #16]
 800473a:	b15b      	cbz	r3, 8004754 <__smakebuf_r+0x74>
 800473c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004740:	4630      	mov	r0, r6
 8004742:	f000 f8d5 	bl	80048f0 <_isatty_r>
 8004746:	b128      	cbz	r0, 8004754 <__smakebuf_r+0x74>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	89a0      	ldrh	r0, [r4, #12]
 8004756:	4305      	orrs	r5, r0
 8004758:	81a5      	strh	r5, [r4, #12]
 800475a:	e7cd      	b.n	80046f8 <__smakebuf_r+0x18>
 800475c:	080044ed 	.word	0x080044ed

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__malloc_lock+0x8>)
 8004762:	f7ff bf95 	b.w	8004690 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20000170 	.word	0x20000170

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_unlock+0x8>)
 800476e:	f7ff bf90 	b.w	8004692 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20000170 	.word	0x20000170

08004778 <_raise_r>:
 8004778:	291f      	cmp	r1, #31
 800477a:	b538      	push	{r3, r4, r5, lr}
 800477c:	4604      	mov	r4, r0
 800477e:	460d      	mov	r5, r1
 8004780:	d904      	bls.n	800478c <_raise_r+0x14>
 8004782:	2316      	movs	r3, #22
 8004784:	6003      	str	r3, [r0, #0]
 8004786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800478e:	b112      	cbz	r2, 8004796 <_raise_r+0x1e>
 8004790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004794:	b94b      	cbnz	r3, 80047aa <_raise_r+0x32>
 8004796:	4620      	mov	r0, r4
 8004798:	f000 f830 	bl	80047fc <_getpid_r>
 800479c:	462a      	mov	r2, r5
 800479e:	4601      	mov	r1, r0
 80047a0:	4620      	mov	r0, r4
 80047a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a6:	f000 b817 	b.w	80047d8 <_kill_r>
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00a      	beq.n	80047c4 <_raise_r+0x4c>
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	d103      	bne.n	80047ba <_raise_r+0x42>
 80047b2:	2316      	movs	r3, #22
 80047b4:	6003      	str	r3, [r0, #0]
 80047b6:	2001      	movs	r0, #1
 80047b8:	e7e7      	b.n	800478a <_raise_r+0x12>
 80047ba:	2400      	movs	r4, #0
 80047bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80047c0:	4628      	mov	r0, r5
 80047c2:	4798      	blx	r3
 80047c4:	2000      	movs	r0, #0
 80047c6:	e7e0      	b.n	800478a <_raise_r+0x12>

080047c8 <raise>:
 80047c8:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <raise+0xc>)
 80047ca:	4601      	mov	r1, r0
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f7ff bfd3 	b.w	8004778 <_raise_r>
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <_kill_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4d07      	ldr	r5, [pc, #28]	; (80047f8 <_kill_r+0x20>)
 80047dc:	2300      	movs	r3, #0
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	f7fc fca7 	bl	8001138 <_kill>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d102      	bne.n	80047f4 <_kill_r+0x1c>
 80047ee:	682b      	ldr	r3, [r5, #0]
 80047f0:	b103      	cbz	r3, 80047f4 <_kill_r+0x1c>
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	bd38      	pop	{r3, r4, r5, pc}
 80047f6:	bf00      	nop
 80047f8:	20000174 	.word	0x20000174

080047fc <_getpid_r>:
 80047fc:	f7fc bc94 	b.w	8001128 <_getpid>

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f894 	bl	8004934 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	; 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	4605      	mov	r5, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004838:	2302      	movs	r3, #2
 800483a:	2200      	movs	r2, #0
 800483c:	f000 f868 	bl	8004910 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b817 	b.w	8004888 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f855 	bl	8004910 <_lseek_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	bf15      	itete	ne
 800486c:	6560      	strne	r0, [r4, #84]	; 0x54
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	bf18      	it	ne
 800487a:	81a3      	strhne	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__sclose>:
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 b813 	b.w	80048ac <_close_r>
	...

08004888 <_write_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d07      	ldr	r5, [pc, #28]	; (80048a8 <_write_r+0x20>)
 800488c:	4604      	mov	r4, r0
 800488e:	4608      	mov	r0, r1
 8004890:	4611      	mov	r1, r2
 8004892:	2200      	movs	r2, #0
 8004894:	602a      	str	r2, [r5, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	f7fc fc85 	bl	80011a6 <_write>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_write_r+0x1e>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_write_r+0x1e>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20000174 	.word	0x20000174

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d06      	ldr	r5, [pc, #24]	; (80048c8 <_close_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fc91 	bl	80011de <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20000174 	.word	0x20000174

080048cc <_fstat_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d07      	ldr	r5, [pc, #28]	; (80048ec <_fstat_r+0x20>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	f7fc fc8c 	bl	80011f6 <_fstat>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d102      	bne.n	80048e8 <_fstat_r+0x1c>
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	b103      	cbz	r3, 80048e8 <_fstat_r+0x1c>
 80048e6:	6023      	str	r3, [r4, #0]
 80048e8:	bd38      	pop	{r3, r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	20000174 	.word	0x20000174

080048f0 <_isatty_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d06      	ldr	r5, [pc, #24]	; (800490c <_isatty_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4604      	mov	r4, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	f7fc fc8b 	bl	8001216 <_isatty>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_isatty_r+0x1a>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_isatty_r+0x1a>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	20000174 	.word	0x20000174

08004910 <_lseek_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d07      	ldr	r5, [pc, #28]	; (8004930 <_lseek_r+0x20>)
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc fc84 	bl	800122c <_lseek>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_lseek_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_lseek_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20000174 	.word	0x20000174

08004934 <_read_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	; (8004954 <_read_r+0x20>)
 8004938:	4604      	mov	r4, r0
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	2200      	movs	r2, #0
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7fc fc12 	bl	800116c <_read>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_read_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_read_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20000174 	.word	0x20000174

08004958 <_init>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	bf00      	nop
 800495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495e:	bc08      	pop	{r3}
 8004960:	469e      	mov	lr, r3
 8004962:	4770      	bx	lr

08004964 <_fini>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr
