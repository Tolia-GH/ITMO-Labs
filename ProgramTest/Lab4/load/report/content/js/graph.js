/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 424.0, "minX": 0.0, "maxY": 2066.0, "series": [{"data": [[0.0, 424.0], [0.1, 424.0], [0.2, 424.0], [0.3, 432.0], [0.4, 432.0], [0.5, 432.0], [0.6, 432.0], [0.7, 433.0], [0.8, 433.0], [0.9, 433.0], [1.0, 433.0], [1.1, 435.0], [1.2, 435.0], [1.3, 445.0], [1.4, 445.0], [1.5, 445.0], [1.6, 445.0], [1.7, 466.0], [1.8, 466.0], [1.9, 466.0], [2.0, 467.0], [2.1, 467.0], [2.2, 468.0], [2.3, 468.0], [2.4, 468.0], [2.5, 468.0], [2.6, 471.0], [2.7, 471.0], [2.8, 471.0], [2.9, 471.0], [3.0, 471.0], [3.1, 471.0], [3.2, 471.0], [3.3, 471.0], [3.4, 471.0], [3.5, 471.0], [3.6, 483.0], [3.7, 483.0], [3.8, 483.0], [3.9, 484.0], [4.0, 484.0], [4.1, 484.0], [4.2, 484.0], [4.3, 484.0], [4.4, 484.0], [4.5, 484.0], [4.6, 484.0], [4.7, 484.0], [4.8, 484.0], [4.9, 484.0], [5.0, 484.0], [5.1, 484.0], [5.2, 484.0], [5.3, 485.0], [5.4, 485.0], [5.5, 485.0], [5.6, 485.0], [5.7, 485.0], [5.8, 485.0], [5.9, 485.0], [6.0, 486.0], [6.1, 486.0], [6.2, 523.0], [6.3, 523.0], [6.4, 525.0], [6.5, 525.0], [6.6, 525.0], [6.7, 525.0], [6.8, 525.0], [6.9, 525.0], [7.0, 526.0], [7.1, 526.0], [7.2, 527.0], [7.3, 527.0], [7.4, 527.0], [7.5, 527.0], [7.6, 527.0], [7.7, 529.0], [7.8, 529.0], [7.9, 530.0], [8.0, 530.0], [8.1, 530.0], [8.2, 530.0], [8.3, 531.0], [8.4, 531.0], [8.5, 531.0], [8.6, 531.0], [8.7, 559.0], [8.8, 559.0], [8.9, 559.0], [9.0, 559.0], [9.1, 560.0], [9.2, 560.0], [9.3, 560.0], [9.4, 560.0], [9.5, 560.0], [9.6, 560.0], [9.7, 560.0], [9.8, 562.0], [9.9, 562.0], [10.0, 562.0], [10.1, 562.0], [10.2, 564.0], [10.3, 564.0], [10.4, 567.0], [10.5, 567.0], [10.6, 570.0], [10.7, 570.0], [10.8, 570.0], [10.9, 570.0], [11.0, 570.0], [11.1, 570.0], [11.2, 570.0], [11.3, 571.0], [11.4, 571.0], [11.5, 643.0], [11.6, 643.0], [11.7, 647.0], [11.8, 647.0], [11.9, 648.0], [12.0, 648.0], [12.1, 648.0], [12.2, 648.0], [12.3, 649.0], [12.4, 649.0], [12.5, 650.0], [12.6, 650.0], [12.7, 650.0], [12.8, 650.0], [12.9, 651.0], [13.0, 651.0], [13.1, 651.0], [13.2, 657.0], [13.3, 657.0], [13.4, 663.0], [13.5, 663.0], [13.6, 663.0], [13.7, 663.0], [13.8, 664.0], [13.9, 664.0], [14.0, 665.0], [14.1, 665.0], [14.2, 665.0], [14.3, 665.0], [14.4, 665.0], [14.5, 665.0], [14.6, 667.0], [14.7, 667.0], [14.8, 667.0], [14.9, 667.0], [15.0, 667.0], [15.1, 668.0], [15.2, 668.0], [15.3, 668.0], [15.4, 668.0], [15.5, 668.0], [15.6, 668.0], [15.7, 669.0], [15.8, 669.0], [15.9, 673.0], [16.0, 673.0], [16.1, 673.0], [16.2, 673.0], [16.3, 675.0], [16.4, 675.0], [16.5, 675.0], [16.6, 675.0], [16.7, 675.0], [16.8, 676.0], [16.9, 676.0], [17.0, 676.0], [17.1, 676.0], [17.2, 676.0], [17.3, 676.0], [17.4, 676.0], [17.5, 676.0], [17.6, 677.0], [17.7, 677.0], [17.8, 677.0], [17.9, 677.0], [18.0, 677.0], [18.1, 677.0], [18.2, 677.0], [18.3, 677.0], [18.4, 678.0], [18.5, 678.0], [18.6, 678.0], [18.7, 678.0], [18.8, 678.0], [18.9, 679.0], [19.0, 679.0], [19.1, 680.0], [19.2, 680.0], [19.3, 680.0], [19.4, 680.0], [19.5, 681.0], [19.6, 681.0], [19.7, 681.0], [19.8, 681.0], [19.9, 681.0], [20.0, 681.0], [20.1, 681.0], [20.2, 681.0], [20.3, 681.0], [20.4, 681.0], [20.5, 681.0], [20.6, 682.0], [20.7, 682.0], [20.8, 682.0], [20.9, 682.0], [21.0, 682.0], [21.1, 682.0], [21.2, 682.0], [21.3, 682.0], [21.4, 682.0], [21.5, 682.0], [21.6, 683.0], [21.7, 683.0], [21.8, 683.0], [21.9, 683.0], [22.0, 683.0], [22.1, 683.0], [22.2, 683.0], [22.3, 683.0], [22.4, 683.0], [22.5, 683.0], [22.6, 683.0], [22.7, 683.0], [22.8, 683.0], [22.9, 684.0], [23.0, 684.0], [23.1, 684.0], [23.2, 684.0], [23.3, 684.0], [23.4, 684.0], [23.5, 684.0], [23.6, 684.0], [23.7, 684.0], [23.8, 684.0], [23.9, 685.0], [24.0, 685.0], [24.1, 685.0], [24.2, 685.0], [24.3, 685.0], [24.4, 685.0], [24.5, 685.0], [24.6, 685.0], [24.7, 685.0], [24.8, 685.0], [24.9, 685.0], [25.0, 685.0], [25.1, 685.0], [25.2, 686.0], [25.3, 686.0], [25.4, 686.0], [25.5, 686.0], [25.6, 687.0], [25.7, 687.0], [25.8, 688.0], [25.9, 688.0], [26.0, 688.0], [26.1, 688.0], [26.2, 688.0], [26.3, 689.0], [26.4, 689.0], [26.5, 689.0], [26.6, 689.0], [26.7, 690.0], [26.8, 690.0], [26.9, 691.0], [27.0, 691.0], [27.1, 691.0], [27.2, 691.0], [27.3, 691.0], [27.4, 691.0], [27.5, 691.0], [27.6, 691.0], [27.7, 691.0], [27.8, 691.0], [27.9, 691.0], [28.0, 691.0], [28.1, 691.0], [28.2, 691.0], [28.3, 691.0], [28.4, 691.0], [28.5, 691.0], [28.6, 692.0], [28.7, 692.0], [28.8, 692.0], [28.9, 692.0], [29.0, 692.0], [29.1, 692.0], [29.2, 692.0], [29.3, 692.0], [29.4, 693.0], [29.5, 693.0], [29.6, 694.0], [29.7, 694.0], [29.8, 694.0], [29.9, 694.0], [30.0, 694.0], [30.1, 697.0], [30.2, 697.0], [30.3, 697.0], [30.4, 697.0], [30.5, 697.0], [30.6, 697.0], [30.7, 697.0], [30.8, 697.0], [30.9, 697.0], [31.0, 697.0], [31.1, 697.0], [31.2, 697.0], [31.3, 700.0], [31.4, 700.0], [31.5, 700.0], [31.6, 700.0], [31.7, 700.0], [31.8, 701.0], [31.9, 701.0], [32.0, 702.0], [32.1, 702.0], [32.2, 703.0], [32.3, 703.0], [32.4, 703.0], [32.5, 703.0], [32.6, 704.0], [32.7, 704.0], [32.8, 704.0], [32.9, 704.0], [33.0, 705.0], [33.1, 705.0], [33.2, 705.0], [33.3, 705.0], [33.4, 705.0], [33.5, 705.0], [33.6, 705.0], [33.7, 705.0], [33.8, 705.0], [33.9, 705.0], [34.0, 705.0], [34.1, 705.0], [34.2, 705.0], [34.3, 705.0], [34.4, 705.0], [34.5, 705.0], [34.6, 705.0], [34.7, 706.0], [34.8, 706.0], [34.9, 706.0], [35.0, 706.0], [35.1, 706.0], [35.2, 706.0], [35.3, 706.0], [35.4, 706.0], [35.5, 706.0], [35.6, 706.0], [35.7, 706.0], [35.8, 706.0], [35.9, 706.0], [36.0, 706.0], [36.1, 706.0], [36.2, 706.0], [36.3, 706.0], [36.4, 707.0], [36.5, 707.0], [36.6, 708.0], [36.7, 708.0], [36.8, 708.0], [36.9, 708.0], [37.0, 708.0], [37.1, 708.0], [37.2, 708.0], [37.3, 708.0], [37.4, 708.0], [37.5, 708.0], [37.6, 708.0], [37.7, 709.0], [37.8, 709.0], [37.9, 709.0], [38.0, 709.0], [38.1, 709.0], [38.2, 709.0], [38.3, 709.0], [38.4, 709.0], [38.5, 709.0], [38.6, 709.0], [38.7, 710.0], [38.8, 710.0], [38.9, 710.0], [39.0, 710.0], [39.1, 710.0], [39.2, 710.0], [39.3, 710.0], [39.4, 710.0], [39.5, 710.0], [39.6, 711.0], [39.7, 711.0], [39.8, 712.0], [39.9, 712.0], [40.0, 712.0], [40.1, 712.0], [40.2, 712.0], [40.3, 712.0], [40.4, 712.0], [40.5, 712.0], [40.6, 712.0], [40.7, 712.0], [40.8, 712.0], [40.9, 712.0], [41.0, 712.0], [41.1, 712.0], [41.2, 712.0], [41.3, 712.0], [41.4, 712.0], [41.5, 713.0], [41.6, 713.0], [41.7, 713.0], [41.8, 713.0], [41.9, 713.0], [42.0, 713.0], [42.1, 713.0], [42.2, 713.0], [42.3, 713.0], [42.4, 713.0], [42.5, 714.0], [42.6, 714.0], [42.7, 714.0], [42.8, 715.0], [42.9, 715.0], [43.0, 715.0], [43.1, 715.0], [43.2, 715.0], [43.3, 715.0], [43.4, 715.0], [43.5, 715.0], [43.6, 715.0], [43.7, 715.0], [43.8, 715.0], [43.9, 715.0], [44.0, 715.0], [44.1, 715.0], [44.2, 716.0], [44.3, 716.0], [44.4, 717.0], [44.5, 717.0], [44.6, 717.0], [44.7, 717.0], [44.8, 717.0], [44.9, 717.0], [45.0, 717.0], [45.1, 717.0], [45.2, 717.0], [45.3, 718.0], [45.4, 718.0], [45.5, 718.0], [45.6, 718.0], [45.7, 719.0], [45.8, 719.0], [45.9, 720.0], [46.0, 720.0], [46.1, 723.0], [46.2, 723.0], [46.3, 723.0], [46.4, 723.0], [46.5, 723.0], [46.6, 723.0], [46.7, 723.0], [46.8, 723.0], [46.9, 723.0], [47.0, 723.0], [47.1, 723.0], [47.2, 723.0], [47.3, 723.0], [47.4, 723.0], [47.5, 723.0], [47.6, 723.0], [47.7, 723.0], [47.8, 724.0], [47.9, 724.0], [48.0, 724.0], [48.1, 724.0], [48.2, 724.0], [48.3, 724.0], [48.4, 724.0], [48.5, 724.0], [48.6, 724.0], [48.7, 724.0], [48.8, 724.0], [48.9, 724.0], [49.0, 724.0], [49.1, 724.0], [49.2, 724.0], [49.3, 725.0], [49.4, 725.0], [49.5, 726.0], [49.6, 726.0], [49.7, 727.0], [49.8, 727.0], [49.9, 727.0], [50.0, 727.0], [50.1, 727.0], [50.2, 727.0], [50.3, 727.0], [50.4, 727.0], [50.5, 727.0], [50.6, 727.0], [50.7, 727.0], [50.8, 727.0], [50.9, 727.0], [51.0, 728.0], [51.1, 728.0], [51.2, 729.0], [51.3, 729.0], [51.4, 729.0], [51.5, 729.0], [51.6, 729.0], [51.7, 729.0], [51.8, 730.0], [51.9, 730.0], [52.0, 730.0], [52.1, 730.0], [52.2, 730.0], [52.3, 730.0], [52.4, 730.0], [52.5, 730.0], [52.6, 730.0], [52.7, 730.0], [52.8, 730.0], [52.9, 731.0], [53.0, 731.0], [53.1, 732.0], [53.2, 732.0], [53.3, 733.0], [53.4, 733.0], [53.5, 733.0], [53.6, 733.0], [53.7, 733.0], [53.8, 733.0], [53.9, 733.0], [54.0, 734.0], [54.1, 734.0], [54.2, 734.0], [54.3, 734.0], [54.4, 734.0], [54.5, 734.0], [54.6, 734.0], [54.7, 734.0], [54.8, 735.0], [54.9, 735.0], [55.0, 735.0], [55.1, 735.0], [55.2, 735.0], [55.3, 735.0], [55.4, 735.0], [55.5, 735.0], [55.6, 735.0], [55.7, 737.0], [55.8, 737.0], [55.9, 738.0], [56.0, 738.0], [56.1, 738.0], [56.2, 738.0], [56.3, 738.0], [56.4, 738.0], [56.5, 738.0], [56.6, 738.0], [56.7, 738.0], [56.8, 738.0], [56.9, 738.0], [57.0, 738.0], [57.1, 740.0], [57.2, 740.0], [57.3, 740.0], [57.4, 740.0], [57.5, 740.0], [57.6, 740.0], [57.7, 740.0], [57.8, 740.0], [57.9, 740.0], [58.0, 741.0], [58.1, 741.0], [58.2, 742.0], [58.3, 742.0], [58.4, 742.0], [58.5, 742.0], [58.6, 742.0], [58.7, 742.0], [58.8, 743.0], [58.9, 743.0], [59.0, 743.0], [59.1, 743.0], [59.2, 743.0], [59.3, 743.0], [59.4, 743.0], [59.5, 743.0], [59.6, 743.0], [59.7, 743.0], [59.8, 743.0], [59.9, 743.0], [60.0, 743.0], [60.1, 744.0], [60.2, 744.0], [60.3, 744.0], [60.4, 744.0], [60.5, 745.0], [60.6, 745.0], [60.7, 745.0], [60.8, 745.0], [60.9, 745.0], [61.0, 745.0], [61.1, 745.0], [61.2, 745.0], [61.3, 745.0], [61.4, 745.0], [61.5, 745.0], [61.6, 745.0], [61.7, 745.0], [61.8, 745.0], [61.9, 745.0], [62.0, 746.0], [62.1, 746.0], [62.2, 746.0], [62.3, 746.0], [62.4, 747.0], [62.5, 747.0], [62.6, 747.0], [62.7, 747.0], [62.8, 747.0], [62.9, 747.0], [63.0, 747.0], [63.1, 747.0], [63.2, 747.0], [63.3, 747.0], [63.4, 747.0], [63.5, 747.0], [63.6, 747.0], [63.7, 747.0], [63.8, 747.0], [63.9, 748.0], [64.0, 748.0], [64.1, 748.0], [64.2, 748.0], [64.3, 748.0], [64.4, 748.0], [64.5, 748.0], [64.6, 748.0], [64.7, 748.0], [64.8, 748.0], [64.9, 748.0], [65.0, 748.0], [65.1, 748.0], [65.2, 748.0], [65.3, 748.0], [65.4, 748.0], [65.5, 748.0], [65.6, 748.0], [65.7, 748.0], [65.8, 748.0], [65.9, 748.0], [66.0, 748.0], [66.1, 748.0], [66.2, 749.0], [66.3, 749.0], [66.4, 749.0], [66.5, 749.0], [66.6, 749.0], [66.7, 749.0], [66.8, 749.0], [66.9, 749.0], [67.0, 749.0], [67.1, 749.0], [67.2, 749.0], [67.3, 750.0], [67.4, 750.0], [67.5, 750.0], [67.6, 750.0], [67.7, 752.0], [67.8, 752.0], [67.9, 752.0], [68.0, 752.0], [68.1, 752.0], [68.2, 752.0], [68.3, 752.0], [68.4, 752.0], [68.5, 753.0], [68.6, 753.0], [68.7, 753.0], [68.8, 753.0], [68.9, 753.0], [69.0, 753.0], [69.1, 753.0], [69.2, 753.0], [69.3, 753.0], [69.4, 755.0], [69.5, 755.0], [69.6, 755.0], [69.7, 755.0], [69.8, 755.0], [69.9, 755.0], [70.0, 756.0], [70.1, 756.0], [70.2, 756.0], [70.3, 756.0], [70.4, 756.0], [70.5, 756.0], [70.6, 756.0], [70.7, 756.0], [70.8, 756.0], [70.9, 756.0], [71.0, 756.0], [71.1, 757.0], [71.2, 757.0], [71.3, 757.0], [71.4, 757.0], [71.5, 757.0], [71.6, 757.0], [71.7, 757.0], [71.8, 757.0], [71.9, 758.0], [72.0, 758.0], [72.1, 758.0], [72.2, 758.0], [72.3, 758.0], [72.4, 758.0], [72.5, 758.0], [72.6, 758.0], [72.7, 758.0], [72.8, 759.0], [72.9, 759.0], [73.0, 768.0], [73.1, 768.0], [73.2, 769.0], [73.3, 769.0], [73.4, 769.0], [73.5, 769.0], [73.6, 769.0], [73.7, 769.0], [73.8, 770.0], [73.9, 770.0], [74.0, 770.0], [74.1, 770.0], [74.2, 770.0], [74.3, 771.0], [74.4, 771.0], [74.5, 771.0], [74.6, 771.0], [74.7, 772.0], [74.8, 772.0], [74.9, 772.0], [75.0, 772.0], [75.1, 772.0], [75.2, 772.0], [75.3, 772.0], [75.4, 772.0], [75.5, 773.0], [75.6, 773.0], [75.7, 773.0], [75.8, 773.0], [75.9, 773.0], [76.0, 773.0], [76.1, 773.0], [76.2, 773.0], [76.3, 773.0], [76.4, 773.0], [76.5, 773.0], [76.6, 775.0], [76.7, 775.0], [76.8, 777.0], [76.9, 777.0], [77.0, 777.0], [77.1, 777.0], [77.2, 780.0], [77.3, 780.0], [77.4, 783.0], [77.5, 783.0], [77.6, 783.0], [77.7, 783.0], [77.8, 783.0], [77.9, 783.0], [78.0, 783.0], [78.1, 784.0], [78.2, 784.0], [78.3, 784.0], [78.4, 784.0], [78.5, 784.0], [78.6, 784.0], [78.7, 784.0], [78.8, 784.0], [78.9, 789.0], [79.0, 789.0], [79.1, 789.0], [79.2, 789.0], [79.3, 790.0], [79.4, 790.0], [79.5, 790.0], [79.6, 790.0], [79.7, 790.0], [79.8, 791.0], [79.9, 791.0], [80.0, 798.0], [80.1, 798.0], [80.2, 799.0], [80.3, 799.0], [80.4, 801.0], [80.5, 801.0], [80.6, 801.0], [80.7, 801.0], [80.8, 801.0], [80.9, 801.0], [81.0, 801.0], [81.1, 801.0], [81.2, 802.0], [81.3, 802.0], [81.4, 802.0], [81.5, 802.0], [81.6, 802.0], [81.7, 802.0], [81.8, 802.0], [81.9, 802.0], [82.0, 802.0], [82.1, 804.0], [82.2, 804.0], [82.3, 818.0], [82.4, 818.0], [82.5, 821.0], [82.6, 821.0], [82.7, 824.0], [82.8, 824.0], [82.9, 825.0], [83.0, 825.0], [83.1, 825.0], [83.2, 825.0], [83.3, 825.0], [83.4, 825.0], [83.5, 825.0], [83.6, 826.0], [83.7, 826.0], [83.8, 838.0], [83.9, 838.0], [84.0, 838.0], [84.1, 838.0], [84.2, 838.0], [84.3, 838.0], [84.4, 839.0], [84.5, 839.0], [84.6, 840.0], [84.7, 840.0], [84.8, 841.0], [84.9, 841.0], [85.0, 842.0], [85.1, 842.0], [85.2, 842.0], [85.3, 842.0], [85.4, 842.0], [85.5, 842.0], [85.6, 842.0], [85.7, 842.0], [85.8, 842.0], [85.9, 843.0], [86.0, 843.0], [86.1, 843.0], [86.2, 843.0], [86.3, 843.0], [86.4, 843.0], [86.5, 850.0], [86.6, 850.0], [86.7, 851.0], [86.8, 851.0], [86.9, 851.0], [87.0, 851.0], [87.1, 851.0], [87.2, 851.0], [87.3, 851.0], [87.4, 851.0], [87.5, 851.0], [87.6, 853.0], [87.7, 853.0], [87.8, 856.0], [87.9, 856.0], [88.0, 870.0], [88.1, 870.0], [88.2, 876.0], [88.3, 876.0], [88.4, 878.0], [88.5, 878.0], [88.6, 880.0], [88.7, 880.0], [88.8, 881.0], [88.9, 881.0], [89.0, 881.0], [89.1, 881.0], [89.2, 881.0], [89.3, 881.0], [89.4, 881.0], [89.5, 883.0], [89.6, 883.0], [89.7, 884.0], [89.8, 884.0], [89.9, 885.0], [90.0, 885.0], [90.1, 886.0], [90.2, 886.0], [90.3, 886.0], [90.4, 886.0], [90.5, 887.0], [90.6, 887.0], [90.7, 891.0], [90.8, 891.0], [90.9, 891.0], [91.0, 892.0], [91.1, 892.0], [91.2, 892.0], [91.3, 892.0], [91.4, 893.0], [91.5, 893.0], [91.6, 893.0], [91.7, 893.0], [91.8, 893.0], [91.9, 893.0], [92.0, 894.0], [92.1, 894.0], [92.2, 895.0], [92.3, 895.0], [92.4, 896.0], [92.5, 896.0], [92.6, 896.0], [92.7, 911.0], [92.8, 911.0], [92.9, 912.0], [93.0, 912.0], [93.1, 912.0], [93.2, 912.0], [93.3, 913.0], [93.4, 913.0], [93.5, 915.0], [93.6, 915.0], [93.7, 922.0], [93.8, 922.0], [93.9, 931.0], [94.0, 931.0], [94.1, 933.0], [94.2, 933.0], [94.3, 933.0], [94.4, 933.0], [94.5, 933.0], [94.6, 943.0], [94.7, 943.0], [94.8, 985.0], [94.9, 985.0], [95.0, 985.0], [95.1, 985.0], [95.2, 1005.0], [95.3, 1005.0], [95.4, 1035.0], [95.5, 1035.0], [95.6, 1050.0], [95.7, 1050.0], [95.8, 1061.0], [95.9, 1061.0], [96.0, 1114.0], [96.1, 1114.0], [96.2, 1120.0], [96.3, 1120.0], [96.4, 1120.0], [96.5, 1120.0], [96.6, 1120.0], [96.7, 1120.0], [96.8, 1120.0], [96.9, 1120.0], [97.0, 1120.0], [97.1, 1120.0], [97.2, 1120.0], [97.3, 1129.0], [97.4, 1129.0], [97.5, 1133.0], [97.6, 1133.0], [97.7, 1134.0], [97.8, 1134.0], [97.9, 1171.0], [98.0, 1171.0], [98.1, 1286.0], [98.2, 1286.0], [98.3, 1286.0], [98.4, 1297.0], [98.5, 1297.0], [98.6, 1327.0], [98.7, 1327.0], [98.8, 1336.0], [98.9, 1336.0], [99.0, 1342.0], [99.1, 1342.0], [99.2, 1346.0], [99.3, 1346.0], [99.4, 1346.0], [99.5, 1346.0], [99.6, 1356.0], [99.7, 1356.0], [99.8, 1407.0], [99.9, 1407.0]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[0.0, 481.0], [0.1, 481.0], [0.2, 481.0], [0.3, 482.0], [0.4, 482.0], [0.5, 482.0], [0.6, 482.0], [0.7, 483.0], [0.8, 483.0], [0.9, 483.0], [1.0, 483.0], [1.1, 483.0], [1.2, 483.0], [1.3, 484.0], [1.4, 484.0], [1.5, 485.0], [1.6, 485.0], [1.7, 486.0], [1.8, 486.0], [1.9, 486.0], [2.0, 486.0], [2.1, 486.0], [2.2, 774.0], [2.3, 774.0], [2.4, 778.0], [2.5, 778.0], [2.6, 778.0], [2.7, 778.0], [2.8, 778.0], [2.9, 778.0], [3.0, 778.0], [3.1, 778.0], [3.2, 779.0], [3.3, 779.0], [3.4, 796.0], [3.5, 796.0], [3.6, 796.0], [3.7, 818.0], [3.8, 818.0], [3.9, 819.0], [4.0, 819.0], [4.1, 819.0], [4.2, 819.0], [4.3, 819.0], [4.4, 819.0], [4.5, 819.0], [4.6, 819.0], [4.7, 820.0], [4.8, 820.0], [4.9, 821.0], [5.0, 821.0], [5.1, 821.0], [5.2, 821.0], [5.3, 822.0], [5.4, 822.0], [5.5, 822.0], [5.6, 844.0], [5.7, 844.0], [5.8, 856.0], [5.9, 856.0], [6.0, 867.0], [6.1, 867.0], [6.2, 867.0], [6.3, 867.0], [6.4, 868.0], [6.5, 868.0], [6.6, 868.0], [6.7, 868.0], [6.8, 868.0], [6.9, 868.0], [7.0, 882.0], [7.1, 882.0], [7.2, 882.0], [7.3, 890.0], [7.4, 890.0], [7.5, 890.0], [7.6, 890.0], [7.7, 891.0], [7.8, 891.0], [7.9, 891.0], [8.0, 891.0], [8.1, 891.0], [8.2, 891.0], [8.3, 894.0], [8.4, 894.0], [8.5, 912.0], [8.6, 912.0], [8.7, 912.0], [8.8, 912.0], [8.9, 914.0], [9.0, 914.0], [9.1, 914.0], [9.2, 917.0], [9.3, 917.0], [9.4, 918.0], [9.5, 918.0], [9.6, 918.0], [9.7, 918.0], [9.8, 918.0], [9.9, 918.0], [10.0, 918.0], [10.1, 918.0], [10.2, 919.0], [10.3, 919.0], [10.4, 927.0], [10.5, 927.0], [10.6, 928.0], [10.7, 928.0], [10.8, 928.0], [10.9, 928.0], [11.0, 928.0], [11.1, 928.0], [11.2, 928.0], [11.3, 929.0], [11.4, 929.0], [11.5, 937.0], [11.6, 937.0], [11.7, 938.0], [11.8, 938.0], [11.9, 938.0], [12.0, 938.0], [12.1, 938.0], [12.2, 938.0], [12.3, 938.0], [12.4, 938.0], [12.5, 970.0], [12.6, 970.0], [12.7, 970.0], [12.8, 970.0], [12.9, 970.0], [13.0, 972.0], [13.1, 972.0], [13.2, 972.0], [13.3, 972.0], [13.4, 972.0], [13.5, 972.0], [13.6, 1024.0], [13.7, 1024.0], [13.8, 1026.0], [13.9, 1026.0], [14.0, 1026.0], [14.1, 1026.0], [14.2, 1028.0], [14.3, 1028.0], [14.4, 1028.0], [14.5, 1032.0], [14.6, 1032.0], [14.7, 1037.0], [14.8, 1037.0], [14.9, 1037.0], [15.0, 1037.0], [15.1, 1042.0], [15.2, 1042.0], [15.3, 1043.0], [15.4, 1043.0], [15.5, 1043.0], [15.6, 1043.0], [15.7, 1044.0], [15.8, 1044.0], [15.9, 1044.0], [16.0, 1044.0], [16.1, 1044.0], [16.2, 1045.0], [16.3, 1045.0], [16.4, 1045.0], [16.5, 1045.0], [16.6, 1045.0], [16.7, 1045.0], [16.8, 1046.0], [16.9, 1046.0], [17.0, 1047.0], [17.1, 1047.0], [17.2, 1047.0], [17.3, 1047.0], [17.4, 1047.0], [17.5, 1047.0], [17.6, 1047.0], [17.7, 1047.0], [17.8, 1047.0], [17.9, 1047.0], [18.0, 1047.0], [18.1, 1047.0], [18.2, 1047.0], [18.3, 1047.0], [18.4, 1047.0], [18.5, 1047.0], [18.6, 1047.0], [18.7, 1047.0], [18.8, 1047.0], [18.9, 1047.0], [19.0, 1047.0], [19.1, 1047.0], [19.2, 1047.0], [19.3, 1047.0], [19.4, 1047.0], [19.5, 1047.0], [19.6, 1047.0], [19.7, 1047.0], [19.8, 1049.0], [19.9, 1049.0], [20.0, 1052.0], [20.1, 1052.0], [20.2, 1053.0], [20.3, 1053.0], [20.4, 1053.0], [20.5, 1053.0], [20.6, 1054.0], [20.7, 1054.0], [20.8, 1054.0], [20.9, 1054.0], [21.0, 1055.0], [21.1, 1055.0], [21.2, 1055.0], [21.3, 1055.0], [21.4, 1056.0], [21.5, 1056.0], [21.6, 1056.0], [21.7, 1056.0], [21.8, 1056.0], [21.9, 1056.0], [22.0, 1056.0], [22.1, 1057.0], [22.2, 1057.0], [22.3, 1057.0], [22.4, 1057.0], [22.5, 1057.0], [22.6, 1057.0], [22.7, 1058.0], [22.8, 1058.0], [22.9, 1058.0], [23.0, 1058.0], [23.1, 1059.0], [23.2, 1059.0], [23.3, 1059.0], [23.4, 1059.0], [23.5, 1059.0], [23.6, 1060.0], [23.7, 1060.0], [23.8, 1060.0], [23.9, 1060.0], [24.0, 1060.0], [24.1, 1060.0], [24.2, 1061.0], [24.3, 1061.0], [24.4, 1061.0], [24.5, 1061.0], [24.6, 1061.0], [24.7, 1061.0], [24.8, 1061.0], [24.9, 1061.0], [25.0, 1062.0], [25.1, 1062.0], [25.2, 1062.0], [25.3, 1062.0], [25.4, 1062.0], [25.5, 1062.0], [25.6, 1062.0], [25.7, 1063.0], [25.8, 1063.0], [25.9, 1063.0], [26.0, 1063.0], [26.1, 1064.0], [26.2, 1064.0], [26.3, 1064.0], [26.4, 1064.0], [26.5, 1064.0], [26.6, 1064.0], [26.7, 1065.0], [26.8, 1065.0], [26.9, 1065.0], [27.0, 1065.0], [27.1, 1065.0], [27.2, 1065.0], [27.3, 1065.0], [27.4, 1065.0], [27.5, 1065.0], [27.6, 1065.0], [27.7, 1065.0], [27.8, 1066.0], [27.9, 1066.0], [28.0, 1066.0], [28.1, 1066.0], [28.2, 1066.0], [28.3, 1066.0], [28.4, 1066.0], [28.5, 1066.0], [28.6, 1066.0], [28.7, 1066.0], [28.8, 1066.0], [28.9, 1067.0], [29.0, 1067.0], [29.1, 1067.0], [29.2, 1067.0], [29.3, 1067.0], [29.4, 1067.0], [29.5, 1067.0], [29.6, 1067.0], [29.7, 1068.0], [29.8, 1068.0], [29.9, 1068.0], [30.0, 1068.0], [30.1, 1068.0], [30.2, 1068.0], [30.3, 1069.0], [30.4, 1069.0], [30.5, 1069.0], [30.6, 1069.0], [30.7, 1069.0], [30.8, 1069.0], [30.9, 1069.0], [31.0, 1069.0], [31.1, 1069.0], [31.2, 1070.0], [31.3, 1070.0], [31.4, 1070.0], [31.5, 1070.0], [31.6, 1070.0], [31.7, 1070.0], [31.8, 1070.0], [31.9, 1070.0], [32.0, 1070.0], [32.1, 1070.0], [32.2, 1070.0], [32.3, 1071.0], [32.4, 1071.0], [32.5, 1071.0], [32.6, 1071.0], [32.7, 1071.0], [32.8, 1071.0], [32.9, 1071.0], [33.0, 1071.0], [33.1, 1071.0], [33.2, 1071.0], [33.3, 1071.0], [33.4, 1071.0], [33.5, 1073.0], [33.6, 1073.0], [33.7, 1073.0], [33.8, 1073.0], [33.9, 1073.0], [34.0, 1073.0], [34.1, 1073.0], [34.2, 1074.0], [34.3, 1074.0], [34.4, 1074.0], [34.5, 1074.0], [34.6, 1076.0], [34.7, 1076.0], [34.8, 1076.0], [34.9, 1076.0], [35.0, 1076.0], [35.1, 1076.0], [35.2, 1076.0], [35.3, 1076.0], [35.4, 1076.0], [35.5, 1076.0], [35.6, 1077.0], [35.7, 1077.0], [35.8, 1077.0], [35.9, 1077.0], [36.0, 1077.0], [36.1, 1078.0], [36.2, 1078.0], [36.3, 1078.0], [36.4, 1078.0], [36.5, 1079.0], [36.6, 1079.0], [36.7, 1079.0], [36.8, 1079.0], [36.9, 1079.0], [37.0, 1079.0], [37.1, 1079.0], [37.2, 1079.0], [37.3, 1080.0], [37.4, 1080.0], [37.5, 1081.0], [37.6, 1081.0], [37.7, 1081.0], [37.8, 1081.0], [37.9, 1081.0], [38.0, 1082.0], [38.1, 1082.0], [38.2, 1082.0], [38.3, 1082.0], [38.4, 1082.0], [38.5, 1082.0], [38.6, 1082.0], [38.7, 1082.0], [38.8, 1082.0], [38.9, 1082.0], [39.0, 1083.0], [39.1, 1083.0], [39.2, 1083.0], [39.3, 1083.0], [39.4, 1083.0], [39.5, 1083.0], [39.6, 1083.0], [39.7, 1083.0], [39.8, 1083.0], [39.9, 1083.0], [40.0, 1083.0], [40.1, 1083.0], [40.2, 1083.0], [40.3, 1083.0], [40.4, 1083.0], [40.5, 1084.0], [40.6, 1084.0], [40.7, 1085.0], [40.8, 1085.0], [40.9, 1085.0], [41.0, 1085.0], [41.1, 1085.0], [41.2, 1085.0], [41.3, 1085.0], [41.4, 1085.0], [41.5, 1085.0], [41.6, 1085.0], [41.7, 1085.0], [41.8, 1086.0], [41.9, 1086.0], [42.0, 1087.0], [42.1, 1087.0], [42.2, 1087.0], [42.3, 1087.0], [42.4, 1087.0], [42.5, 1087.0], [42.6, 1088.0], [42.7, 1088.0], [42.8, 1088.0], [42.9, 1088.0], [43.0, 1088.0], [43.1, 1088.0], [43.2, 1088.0], [43.3, 1088.0], [43.4, 1088.0], [43.5, 1089.0], [43.6, 1089.0], [43.7, 1089.0], [43.8, 1089.0], [43.9, 1089.0], [44.0, 1089.0], [44.1, 1089.0], [44.2, 1089.0], [44.3, 1090.0], [44.4, 1090.0], [44.5, 1090.0], [44.6, 1090.0], [44.7, 1090.0], [44.8, 1090.0], [44.9, 1090.0], [45.0, 1091.0], [45.1, 1091.0], [45.2, 1091.0], [45.3, 1091.0], [45.4, 1091.0], [45.5, 1091.0], [45.6, 1092.0], [45.7, 1092.0], [45.8, 1092.0], [45.9, 1092.0], [46.0, 1093.0], [46.1, 1093.0], [46.2, 1093.0], [46.3, 1093.0], [46.4, 1093.0], [46.5, 1093.0], [46.6, 1093.0], [46.7, 1094.0], [46.8, 1094.0], [46.9, 1094.0], [47.0, 1094.0], [47.1, 1094.0], [47.2, 1094.0], [47.3, 1095.0], [47.4, 1095.0], [47.5, 1095.0], [47.6, 1095.0], [47.7, 1096.0], [47.8, 1096.0], [47.9, 1098.0], [48.0, 1098.0], [48.1, 1098.0], [48.2, 1098.0], [48.3, 1098.0], [48.4, 1099.0], [48.5, 1099.0], [48.6, 1100.0], [48.7, 1100.0], [48.8, 1100.0], [48.9, 1100.0], [49.0, 1101.0], [49.1, 1101.0], [49.2, 1102.0], [49.3, 1102.0], [49.4, 1102.0], [49.5, 1102.0], [49.6, 1102.0], [49.7, 1102.0], [49.8, 1102.0], [49.9, 1102.0], [50.0, 1103.0], [50.1, 1103.0], [50.2, 1103.0], [50.3, 1103.0], [50.4, 1103.0], [50.5, 1103.0], [50.6, 1103.0], [50.7, 1103.0], [50.8, 1103.0], [50.9, 1103.0], [51.0, 1103.0], [51.1, 1104.0], [51.2, 1104.0], [51.3, 1104.0], [51.4, 1104.0], [51.5, 1104.0], [51.6, 1104.0], [51.7, 1104.0], [51.8, 1104.0], [51.9, 1104.0], [52.0, 1104.0], [52.1, 1104.0], [52.2, 1104.0], [52.3, 1104.0], [52.4, 1104.0], [52.5, 1104.0], [52.6, 1105.0], [52.7, 1105.0], [52.8, 1106.0], [52.9, 1106.0], [53.0, 1107.0], [53.1, 1107.0], [53.2, 1107.0], [53.3, 1107.0], [53.4, 1108.0], [53.5, 1108.0], [53.6, 1108.0], [53.7, 1108.0], [53.8, 1108.0], [53.9, 1109.0], [54.0, 1109.0], [54.1, 1110.0], [54.2, 1110.0], [54.3, 1110.0], [54.4, 1110.0], [54.5, 1110.0], [54.6, 1110.0], [54.7, 1111.0], [54.8, 1111.0], [54.9, 1111.0], [55.0, 1111.0], [55.1, 1112.0], [55.2, 1112.0], [55.3, 1113.0], [55.4, 1113.0], [55.5, 1113.0], [55.6, 1113.0], [55.7, 1113.0], [55.8, 1113.0], [55.9, 1113.0], [56.0, 1114.0], [56.1, 1114.0], [56.2, 1114.0], [56.3, 1114.0], [56.4, 1114.0], [56.5, 1114.0], [56.6, 1114.0], [56.7, 1114.0], [56.8, 1115.0], [56.9, 1115.0], [57.0, 1115.0], [57.1, 1115.0], [57.2, 1115.0], [57.3, 1115.0], [57.4, 1115.0], [57.5, 1116.0], [57.6, 1116.0], [57.7, 1117.0], [57.8, 1117.0], [57.9, 1117.0], [58.0, 1117.0], [58.1, 1118.0], [58.2, 1118.0], [58.3, 1118.0], [58.4, 1118.0], [58.5, 1118.0], [58.6, 1118.0], [58.7, 1119.0], [58.8, 1119.0], [58.9, 1119.0], [59.0, 1119.0], [59.1, 1119.0], [59.2, 1119.0], [59.3, 1119.0], [59.4, 1119.0], [59.5, 1119.0], [59.6, 1119.0], [59.7, 1119.0], [59.8, 1119.0], [59.9, 1119.0], [60.0, 1119.0], [60.1, 1119.0], [60.2, 1119.0], [60.3, 1119.0], [60.4, 1119.0], [60.5, 1119.0], [60.6, 1120.0], [60.7, 1120.0], [60.8, 1120.0], [60.9, 1120.0], [61.0, 1120.0], [61.1, 1121.0], [61.2, 1121.0], [61.3, 1121.0], [61.4, 1121.0], [61.5, 1121.0], [61.6, 1121.0], [61.7, 1121.0], [61.8, 1121.0], [61.9, 1121.0], [62.0, 1121.0], [62.1, 1121.0], [62.2, 1121.0], [62.3, 1121.0], [62.4, 1121.0], [62.5, 1122.0], [62.6, 1122.0], [62.7, 1122.0], [62.8, 1122.0], [62.9, 1122.0], [63.0, 1122.0], [63.1, 1122.0], [63.2, 1124.0], [63.3, 1124.0], [63.4, 1124.0], [63.5, 1124.0], [63.6, 1124.0], [63.7, 1124.0], [63.8, 1125.0], [63.9, 1125.0], [64.0, 1126.0], [64.1, 1126.0], [64.2, 1129.0], [64.3, 1129.0], [64.4, 1129.0], [64.5, 1130.0], [64.6, 1130.0], [64.7, 1131.0], [64.8, 1131.0], [64.9, 1131.0], [65.0, 1131.0], [65.1, 1131.0], [65.2, 1131.0], [65.3, 1131.0], [65.4, 1131.0], [65.5, 1131.0], [65.6, 1131.0], [65.7, 1131.0], [65.8, 1131.0], [65.9, 1132.0], [66.0, 1132.0], [66.1, 1132.0], [66.2, 1132.0], [66.3, 1132.0], [66.4, 1132.0], [66.5, 1132.0], [66.6, 1132.0], [66.7, 1132.0], [66.8, 1132.0], [66.9, 1132.0], [67.0, 1132.0], [67.1, 1132.0], [67.2, 1133.0], [67.3, 1133.0], [67.4, 1133.0], [67.5, 1133.0], [67.6, 1133.0], [67.7, 1133.0], [67.8, 1134.0], [67.9, 1134.0], [68.0, 1134.0], [68.1, 1134.0], [68.2, 1134.0], [68.3, 1134.0], [68.4, 1134.0], [68.5, 1134.0], [68.6, 1134.0], [68.7, 1135.0], [68.8, 1135.0], [68.9, 1135.0], [69.0, 1135.0], [69.1, 1135.0], [69.2, 1135.0], [69.3, 1135.0], [69.4, 1135.0], [69.5, 1135.0], [69.6, 1135.0], [69.7, 1135.0], [69.8, 1136.0], [69.9, 1136.0], [70.0, 1136.0], [70.1, 1136.0], [70.2, 1136.0], [70.3, 1136.0], [70.4, 1136.0], [70.5, 1136.0], [70.6, 1137.0], [70.7, 1137.0], [70.8, 1137.0], [70.9, 1137.0], [71.0, 1137.0], [71.1, 1137.0], [71.2, 1137.0], [71.3, 1137.0], [71.4, 1137.0], [71.5, 1137.0], [71.6, 1137.0], [71.7, 1138.0], [71.8, 1138.0], [71.9, 1138.0], [72.0, 1138.0], [72.1, 1138.0], [72.2, 1138.0], [72.3, 1138.0], [72.4, 1138.0], [72.5, 1138.0], [72.6, 1138.0], [72.7, 1139.0], [72.8, 1139.0], [72.9, 1139.0], [73.0, 1139.0], [73.1, 1140.0], [73.2, 1140.0], [73.3, 1140.0], [73.4, 1140.0], [73.5, 1140.0], [73.6, 1140.0], [73.7, 1140.0], [73.8, 1140.0], [73.9, 1140.0], [74.0, 1140.0], [74.1, 1140.0], [74.2, 1142.0], [74.3, 1142.0], [74.4, 1144.0], [74.5, 1144.0], [74.6, 1145.0], [74.7, 1145.0], [74.8, 1146.0], [74.9, 1146.0], [75.0, 1146.0], [75.1, 1146.0], [75.2, 1146.0], [75.3, 1146.0], [75.4, 1146.0], [75.5, 1147.0], [75.6, 1147.0], [75.7, 1147.0], [75.8, 1147.0], [75.9, 1147.0], [76.0, 1147.0], [76.1, 1147.0], [76.2, 1147.0], [76.3, 1150.0], [76.4, 1150.0], [76.5, 1151.0], [76.6, 1151.0], [76.7, 1151.0], [76.8, 1151.0], [76.9, 1151.0], [77.0, 1151.0], [77.1, 1151.0], [77.2, 1152.0], [77.3, 1152.0], [77.4, 1152.0], [77.5, 1152.0], [77.6, 1153.0], [77.7, 1153.0], [77.8, 1154.0], [77.9, 1154.0], [78.0, 1154.0], [78.1, 1154.0], [78.2, 1156.0], [78.3, 1156.0], [78.4, 1157.0], [78.5, 1157.0], [78.6, 1157.0], [78.7, 1158.0], [78.8, 1158.0], [78.9, 1158.0], [79.0, 1158.0], [79.1, 1159.0], [79.2, 1159.0], [79.3, 1159.0], [79.4, 1159.0], [79.5, 1160.0], [79.6, 1160.0], [79.7, 1160.0], [79.8, 1160.0], [79.9, 1160.0], [80.0, 1160.0], [80.1, 1161.0], [80.2, 1161.0], [80.3, 1164.0], [80.4, 1164.0], [80.5, 1164.0], [80.6, 1164.0], [80.7, 1164.0], [80.8, 1167.0], [80.9, 1167.0], [81.0, 1167.0], [81.1, 1167.0], [81.2, 1169.0], [81.3, 1169.0], [81.4, 1169.0], [81.5, 1169.0], [81.6, 1169.0], [81.7, 1169.0], [81.8, 1170.0], [81.9, 1170.0], [82.0, 1170.0], [82.1, 1170.0], [82.2, 1170.0], [82.3, 1170.0], [82.4, 1170.0], [82.5, 1171.0], [82.6, 1171.0], [82.7, 1171.0], [82.8, 1171.0], [82.9, 1171.0], [83.0, 1171.0], [83.1, 1173.0], [83.2, 1173.0], [83.3, 1174.0], [83.4, 1174.0], [83.5, 1174.0], [83.6, 1174.0], [83.7, 1174.0], [83.8, 1174.0], [83.9, 1175.0], [84.0, 1175.0], [84.1, 1175.0], [84.2, 1175.0], [84.3, 1175.0], [84.4, 1176.0], [84.5, 1176.0], [84.6, 1176.0], [84.7, 1176.0], [84.8, 1176.0], [84.9, 1176.0], [85.0, 1176.0], [85.1, 1176.0], [85.2, 1178.0], [85.3, 1178.0], [85.4, 1178.0], [85.5, 1178.0], [85.6, 1179.0], [85.7, 1179.0], [85.8, 1179.0], [85.9, 1179.0], [86.0, 1179.0], [86.1, 1179.0], [86.2, 1179.0], [86.3, 1179.0], [86.4, 1179.0], [86.5, 1184.0], [86.6, 1184.0], [86.7, 1184.0], [86.8, 1184.0], [86.9, 1185.0], [87.0, 1185.0], [87.1, 1185.0], [87.2, 1185.0], [87.3, 1185.0], [87.4, 1185.0], [87.5, 1185.0], [87.6, 1185.0], [87.7, 1185.0], [87.8, 1185.0], [87.9, 1185.0], [88.0, 1186.0], [88.1, 1186.0], [88.2, 1186.0], [88.3, 1186.0], [88.4, 1187.0], [88.5, 1187.0], [88.6, 1187.0], [88.7, 1187.0], [88.8, 1187.0], [88.9, 1187.0], [89.0, 1188.0], [89.1, 1188.0], [89.2, 1189.0], [89.3, 1189.0], [89.4, 1189.0], [89.5, 1189.0], [89.6, 1189.0], [89.7, 1189.0], [89.8, 1189.0], [89.9, 1190.0], [90.0, 1190.0], [90.1, 1191.0], [90.2, 1191.0], [90.3, 1192.0], [90.4, 1192.0], [90.5, 1193.0], [90.6, 1193.0], [90.7, 1193.0], [90.8, 1193.0], [90.9, 1196.0], [91.0, 1196.0], [91.1, 1196.0], [91.2, 1199.0], [91.3, 1199.0], [91.4, 1199.0], [91.5, 1199.0], [91.6, 1200.0], [91.7, 1200.0], [91.8, 1201.0], [91.9, 1201.0], [92.0, 1202.0], [92.1, 1202.0], [92.2, 1202.0], [92.3, 1202.0], [92.4, 1209.0], [92.5, 1209.0], [92.6, 1212.0], [92.7, 1212.0], [92.8, 1224.0], [92.9, 1224.0], [93.0, 1224.0], [93.1, 1227.0], [93.2, 1227.0], [93.3, 1227.0], [93.4, 1227.0], [93.5, 1228.0], [93.6, 1228.0], [93.7, 1233.0], [93.8, 1233.0], [93.9, 1238.0], [94.0, 1238.0], [94.1, 1239.0], [94.2, 1239.0], [94.3, 1239.0], [94.4, 1239.0], [94.5, 1242.0], [94.6, 1242.0], [94.7, 1242.0], [94.8, 1244.0], [94.9, 1244.0], [95.0, 1255.0], [95.1, 1255.0], [95.2, 1256.0], [95.3, 1256.0], [95.4, 1257.0], [95.5, 1257.0], [95.6, 1257.0], [95.7, 1257.0], [95.8, 1260.0], [95.9, 1260.0], [96.0, 1262.0], [96.1, 1262.0], [96.2, 1262.0], [96.3, 1262.0], [96.4, 1277.0], [96.5, 1277.0], [96.6, 1277.0], [96.7, 1278.0], [96.8, 1278.0], [96.9, 1278.0], [97.0, 1278.0], [97.1, 1290.0], [97.2, 1290.0], [97.3, 1305.0], [97.4, 1305.0], [97.5, 1308.0], [97.6, 1308.0], [97.7, 1308.0], [97.8, 1308.0], [97.9, 1308.0], [98.0, 1308.0], [98.1, 1313.0], [98.2, 1313.0], [98.3, 1313.0], [98.4, 1328.0], [98.5, 1328.0], [98.6, 1341.0], [98.7, 1341.0], [98.8, 1375.0], [98.9, 1375.0], [99.0, 1412.0], [99.1, 1412.0], [99.2, 1527.0], [99.3, 1527.0], [99.4, 1530.0], [99.5, 1530.0], [99.6, 1740.0], [99.7, 1740.0], [99.8, 1876.0], [99.9, 1876.0], [100.0, 1876.0]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[0.0, 719.0], [0.1, 719.0], [0.2, 719.0], [0.3, 719.0], [0.4, 719.0], [0.5, 719.0], [0.6, 719.0], [0.7, 721.0], [0.8, 721.0], [0.9, 721.0], [1.0, 721.0], [1.1, 743.0], [1.2, 743.0], [1.3, 743.0], [1.4, 782.0], [1.5, 782.0], [1.6, 782.0], [1.7, 782.0], [1.8, 812.0], [1.9, 812.0], [2.0, 1165.0], [2.1, 1165.0], [2.2, 1173.0], [2.3, 1173.0], [2.4, 1174.0], [2.5, 1174.0], [2.6, 1174.0], [2.7, 1189.0], [2.8, 1189.0], [2.9, 1189.0], [3.0, 1189.0], [3.1, 1190.0], [3.2, 1190.0], [3.3, 1193.0], [3.4, 1193.0], [3.5, 1194.0], [3.6, 1194.0], [3.7, 1197.0], [3.8, 1197.0], [3.9, 1197.0], [4.0, 1225.0], [4.1, 1225.0], [4.2, 1225.0], [4.3, 1225.0], [4.4, 1226.0], [4.5, 1226.0], [4.6, 1226.0], [4.7, 1226.0], [4.8, 1226.0], [4.9, 1226.0], [5.0, 1226.0], [5.1, 1239.0], [5.2, 1239.0], [5.3, 1263.0], [5.4, 1263.0], [5.5, 1263.0], [5.6, 1263.0], [5.7, 1263.0], [5.8, 1263.0], [5.9, 1264.0], [6.0, 1264.0], [6.1, 1265.0], [6.2, 1265.0], [6.3, 1265.0], [6.4, 1288.0], [6.5, 1288.0], [6.6, 1293.0], [6.7, 1293.0], [6.8, 1293.0], [6.9, 1293.0], [7.0, 1295.0], [7.1, 1295.0], [7.2, 1295.0], [7.3, 1295.0], [7.4, 1295.0], [7.5, 1295.0], [7.6, 1295.0], [7.7, 1295.0], [7.8, 1295.0], [7.9, 1298.0], [8.0, 1298.0], [8.1, 1298.0], [8.2, 1298.0], [8.3, 1298.0], [8.4, 1298.0], [8.5, 1300.0], [8.6, 1300.0], [8.7, 1302.0], [8.8, 1302.0], [8.9, 1302.0], [9.0, 1302.0], [9.1, 1302.0], [9.2, 1302.0], [9.3, 1302.0], [9.4, 1308.0], [9.5, 1308.0], [9.6, 1312.0], [9.7, 1312.0], [9.8, 1332.0], [9.9, 1332.0], [10.0, 1332.0], [10.1, 1335.0], [10.2, 1335.0], [10.3, 1335.0], [10.4, 1335.0], [10.5, 1336.0], [10.6, 1336.0], [10.7, 1336.0], [10.8, 1336.0], [10.9, 1337.0], [11.0, 1337.0], [11.1, 1345.0], [11.2, 1345.0], [11.3, 1345.0], [11.4, 1345.0], [11.5, 1345.0], [11.6, 1345.0], [11.7, 1345.0], [11.8, 1345.0], [11.9, 1345.0], [12.0, 1348.0], [12.1, 1348.0], [12.2, 1375.0], [12.3, 1375.0], [12.4, 1376.0], [12.5, 1376.0], [12.6, 1376.0], [12.7, 1376.0], [12.8, 1376.0], [12.9, 1376.0], [13.0, 1376.0], [13.1, 1377.0], [13.2, 1377.0], [13.3, 1423.0], [13.4, 1423.0], [13.5, 1429.0], [13.6, 1429.0], [13.7, 1430.0], [13.8, 1430.0], [13.9, 1430.0], [14.0, 1431.0], [14.1, 1431.0], [14.2, 1433.0], [14.3, 1433.0], [14.4, 1434.0], [14.5, 1434.0], [14.6, 1434.0], [14.7, 1434.0], [14.8, 1435.0], [14.9, 1435.0], [15.0, 1435.0], [15.1, 1435.0], [15.2, 1435.0], [15.3, 1435.0], [15.4, 1435.0], [15.5, 1435.0], [15.6, 1435.0], [15.7, 1435.0], [15.8, 1435.0], [15.9, 1436.0], [16.0, 1436.0], [16.1, 1436.0], [16.2, 1436.0], [16.3, 1436.0], [16.4, 1436.0], [16.5, 1436.0], [16.6, 1438.0], [16.7, 1438.0], [16.8, 1438.0], [16.9, 1438.0], [17.0, 1438.0], [17.1, 1438.0], [17.2, 1439.0], [17.3, 1439.0], [17.4, 1440.0], [17.5, 1440.0], [17.6, 1440.0], [17.7, 1440.0], [17.8, 1440.0], [17.9, 1441.0], [18.0, 1441.0], [18.1, 1441.0], [18.2, 1441.0], [18.3, 1443.0], [18.4, 1443.0], [18.5, 1443.0], [18.6, 1443.0], [18.7, 1443.0], [18.8, 1443.0], [18.9, 1443.0], [19.0, 1444.0], [19.1, 1444.0], [19.2, 1444.0], [19.3, 1444.0], [19.4, 1444.0], [19.5, 1444.0], [19.6, 1445.0], [19.7, 1445.0], [19.8, 1445.0], [19.9, 1445.0], [20.0, 1445.0], [20.1, 1445.0], [20.2, 1445.0], [20.3, 1446.0], [20.4, 1446.0], [20.5, 1446.0], [20.6, 1446.0], [20.7, 1446.0], [20.8, 1446.0], [20.9, 1447.0], [21.0, 1447.0], [21.1, 1447.0], [21.2, 1447.0], [21.3, 1447.0], [21.4, 1447.0], [21.5, 1447.0], [21.6, 1447.0], [21.7, 1447.0], [21.8, 1448.0], [21.9, 1448.0], [22.0, 1448.0], [22.1, 1448.0], [22.2, 1448.0], [22.3, 1448.0], [22.4, 1449.0], [22.5, 1449.0], [22.6, 1449.0], [22.7, 1449.0], [22.8, 1449.0], [22.9, 1449.0], [23.0, 1449.0], [23.1, 1449.0], [23.2, 1449.0], [23.3, 1450.0], [23.4, 1450.0], [23.5, 1450.0], [23.6, 1450.0], [23.7, 1450.0], [23.8, 1450.0], [23.9, 1450.0], [24.0, 1450.0], [24.1, 1450.0], [24.2, 1450.0], [24.3, 1450.0], [24.4, 1450.0], [24.5, 1450.0], [24.6, 1451.0], [24.7, 1451.0], [24.8, 1451.0], [24.9, 1451.0], [25.0, 1451.0], [25.1, 1451.0], [25.2, 1451.0], [25.3, 1451.0], [25.4, 1451.0], [25.5, 1452.0], [25.6, 1452.0], [25.7, 1452.0], [25.8, 1452.0], [25.9, 1452.0], [26.0, 1452.0], [26.1, 1452.0], [26.2, 1452.0], [26.3, 1452.0], [26.4, 1452.0], [26.5, 1452.0], [26.6, 1452.0], [26.7, 1452.0], [26.8, 1452.0], [26.9, 1452.0], [27.0, 1452.0], [27.1, 1452.0], [27.2, 1453.0], [27.3, 1453.0], [27.4, 1453.0], [27.5, 1453.0], [27.6, 1453.0], [27.7, 1453.0], [27.8, 1453.0], [27.9, 1453.0], [28.0, 1453.0], [28.1, 1454.0], [28.2, 1454.0], [28.3, 1454.0], [28.4, 1454.0], [28.5, 1454.0], [28.6, 1454.0], [28.7, 1454.0], [28.8, 1454.0], [28.9, 1454.0], [29.0, 1454.0], [29.1, 1454.0], [29.2, 1454.0], [29.3, 1454.0], [29.4, 1454.0], [29.5, 1454.0], [29.6, 1454.0], [29.7, 1454.0], [29.8, 1454.0], [29.9, 1454.0], [30.0, 1454.0], [30.1, 1454.0], [30.2, 1454.0], [30.3, 1455.0], [30.4, 1455.0], [30.5, 1455.0], [30.6, 1455.0], [30.7, 1455.0], [30.8, 1455.0], [30.9, 1455.0], [31.0, 1455.0], [31.1, 1455.0], [31.2, 1455.0], [31.3, 1455.0], [31.4, 1455.0], [31.5, 1455.0], [31.6, 1456.0], [31.7, 1456.0], [31.8, 1456.0], [31.9, 1456.0], [32.0, 1456.0], [32.1, 1456.0], [32.2, 1456.0], [32.3, 1456.0], [32.4, 1456.0], [32.5, 1456.0], [32.6, 1456.0], [32.7, 1456.0], [32.8, 1456.0], [32.9, 1457.0], [33.0, 1457.0], [33.1, 1457.0], [33.2, 1457.0], [33.3, 1457.0], [33.4, 1457.0], [33.5, 1457.0], [33.6, 1457.0], [33.7, 1458.0], [33.8, 1458.0], [33.9, 1458.0], [34.0, 1458.0], [34.1, 1458.0], [34.2, 1458.0], [34.3, 1458.0], [34.4, 1459.0], [34.5, 1459.0], [34.6, 1459.0], [34.7, 1459.0], [34.8, 1459.0], [34.9, 1459.0], [35.0, 1460.0], [35.1, 1460.0], [35.2, 1460.0], [35.3, 1460.0], [35.4, 1460.0], [35.5, 1460.0], [35.6, 1460.0], [35.7, 1461.0], [35.8, 1461.0], [35.9, 1461.0], [36.0, 1461.0], [36.1, 1461.0], [36.2, 1461.0], [36.3, 1461.0], [36.4, 1461.0], [36.5, 1461.0], [36.6, 1461.0], [36.7, 1461.0], [36.8, 1462.0], [36.9, 1462.0], [37.0, 1463.0], [37.1, 1463.0], [37.2, 1463.0], [37.3, 1463.0], [37.4, 1463.0], [37.5, 1463.0], [37.6, 1463.0], [37.7, 1464.0], [37.8, 1464.0], [37.9, 1464.0], [38.0, 1464.0], [38.1, 1464.0], [38.2, 1464.0], [38.3, 1465.0], [38.4, 1465.0], [38.5, 1465.0], [38.6, 1465.0], [38.7, 1465.0], [38.8, 1465.0], [38.9, 1465.0], [39.0, 1465.0], [39.1, 1465.0], [39.2, 1467.0], [39.3, 1467.0], [39.4, 1467.0], [39.5, 1467.0], [39.6, 1467.0], [39.7, 1467.0], [39.8, 1468.0], [39.9, 1468.0], [40.0, 1468.0], [40.1, 1468.0], [40.2, 1468.0], [40.3, 1468.0], [40.4, 1468.0], [40.5, 1469.0], [40.6, 1469.0], [40.7, 1469.0], [40.8, 1469.0], [40.9, 1469.0], [41.0, 1469.0], [41.1, 1470.0], [41.2, 1470.0], [41.3, 1470.0], [41.4, 1470.0], [41.5, 1470.0], [41.6, 1470.0], [41.7, 1470.0], [41.8, 1474.0], [41.9, 1474.0], [42.0, 1474.0], [42.1, 1474.0], [42.2, 1474.0], [42.3, 1474.0], [42.4, 1475.0], [42.5, 1475.0], [42.6, 1475.0], [42.7, 1475.0], [42.8, 1475.0], [42.9, 1476.0], [43.0, 1476.0], [43.1, 1476.0], [43.2, 1476.0], [43.3, 1476.0], [43.4, 1476.0], [43.5, 1476.0], [43.6, 1476.0], [43.7, 1476.0], [43.8, 1476.0], [43.9, 1476.0], [44.0, 1476.0], [44.1, 1476.0], [44.2, 1476.0], [44.3, 1476.0], [44.4, 1476.0], [44.5, 1476.0], [44.6, 1477.0], [44.7, 1477.0], [44.8, 1478.0], [44.9, 1478.0], [45.0, 1480.0], [45.1, 1480.0], [45.2, 1480.0], [45.3, 1481.0], [45.4, 1481.0], [45.5, 1481.0], [45.6, 1481.0], [45.7, 1482.0], [45.8, 1482.0], [45.9, 1485.0], [46.0, 1485.0], [46.1, 1485.0], [46.2, 1485.0], [46.3, 1485.0], [46.4, 1485.0], [46.5, 1485.0], [46.6, 1486.0], [46.7, 1486.0], [46.8, 1486.0], [46.9, 1486.0], [47.0, 1486.0], [47.1, 1486.0], [47.2, 1487.0], [47.3, 1487.0], [47.4, 1487.0], [47.5, 1487.0], [47.6, 1487.0], [47.7, 1487.0], [47.8, 1487.0], [47.9, 1489.0], [48.0, 1489.0], [48.1, 1491.0], [48.2, 1491.0], [48.3, 1491.0], [48.4, 1491.0], [48.5, 1491.0], [48.6, 1491.0], [48.7, 1492.0], [48.8, 1492.0], [48.9, 1492.0], [49.0, 1493.0], [49.1, 1493.0], [49.2, 1494.0], [49.3, 1494.0], [49.4, 1495.0], [49.5, 1495.0], [49.6, 1495.0], [49.7, 1495.0], [49.8, 1495.0], [49.9, 1495.0], [50.0, 1496.0], [50.1, 1496.0], [50.2, 1496.0], [50.3, 1496.0], [50.4, 1496.0], [50.5, 1497.0], [50.6, 1497.0], [50.7, 1497.0], [50.8, 1497.0], [50.9, 1497.0], [51.0, 1497.0], [51.1, 1497.0], [51.2, 1497.0], [51.3, 1497.0], [51.4, 1497.0], [51.5, 1497.0], [51.6, 1498.0], [51.7, 1498.0], [51.8, 1498.0], [51.9, 1498.0], [52.0, 1498.0], [52.1, 1498.0], [52.2, 1499.0], [52.3, 1499.0], [52.4, 1499.0], [52.5, 1499.0], [52.6, 1499.0], [52.7, 1500.0], [52.8, 1500.0], [52.9, 1500.0], [53.0, 1500.0], [53.1, 1500.0], [53.2, 1500.0], [53.3, 1500.0], [53.4, 1500.0], [53.5, 1500.0], [53.6, 1500.0], [53.7, 1500.0], [53.8, 1500.0], [53.9, 1500.0], [54.0, 1500.0], [54.1, 1500.0], [54.2, 1500.0], [54.3, 1500.0], [54.4, 1500.0], [54.5, 1500.0], [54.6, 1501.0], [54.7, 1501.0], [54.8, 1502.0], [54.9, 1502.0], [55.0, 1502.0], [55.1, 1502.0], [55.2, 1502.0], [55.3, 1502.0], [55.4, 1502.0], [55.5, 1502.0], [55.6, 1502.0], [55.7, 1502.0], [55.8, 1502.0], [55.9, 1502.0], [56.0, 1502.0], [56.1, 1502.0], [56.2, 1502.0], [56.3, 1502.0], [56.4, 1502.0], [56.5, 1502.0], [56.6, 1503.0], [56.7, 1503.0], [56.8, 1503.0], [56.9, 1503.0], [57.0, 1503.0], [57.1, 1503.0], [57.2, 1503.0], [57.3, 1503.0], [57.4, 1503.0], [57.5, 1503.0], [57.6, 1503.0], [57.7, 1503.0], [57.8, 1503.0], [57.9, 1503.0], [58.0, 1503.0], [58.1, 1503.0], [58.2, 1503.0], [58.3, 1504.0], [58.4, 1504.0], [58.5, 1504.0], [58.6, 1504.0], [58.7, 1505.0], [58.8, 1505.0], [58.9, 1505.0], [59.0, 1505.0], [59.1, 1505.0], [59.2, 1505.0], [59.3, 1505.0], [59.4, 1505.0], [59.5, 1505.0], [59.6, 1505.0], [59.7, 1505.0], [59.8, 1505.0], [59.9, 1505.0], [60.0, 1505.0], [60.1, 1505.0], [60.2, 1505.0], [60.3, 1507.0], [60.4, 1507.0], [60.5, 1507.0], [60.6, 1507.0], [60.7, 1508.0], [60.8, 1508.0], [60.9, 1508.0], [61.0, 1508.0], [61.1, 1508.0], [61.2, 1508.0], [61.3, 1508.0], [61.4, 1509.0], [61.5, 1509.0], [61.6, 1510.0], [61.7, 1510.0], [61.8, 1511.0], [61.9, 1511.0], [62.0, 1512.0], [62.1, 1512.0], [62.2, 1512.0], [62.3, 1512.0], [62.4, 1512.0], [62.5, 1512.0], [62.6, 1512.0], [62.7, 1512.0], [62.8, 1512.0], [62.9, 1512.0], [63.0, 1512.0], [63.1, 1513.0], [63.2, 1513.0], [63.3, 1514.0], [63.4, 1514.0], [63.5, 1514.0], [63.6, 1514.0], [63.7, 1514.0], [63.8, 1514.0], [63.9, 1514.0], [64.0, 1514.0], [64.1, 1514.0], [64.2, 1514.0], [64.3, 1514.0], [64.4, 1515.0], [64.5, 1515.0], [64.6, 1515.0], [64.7, 1515.0], [64.8, 1515.0], [64.9, 1515.0], [65.0, 1516.0], [65.1, 1516.0], [65.2, 1516.0], [65.3, 1516.0], [65.4, 1516.0], [65.5, 1516.0], [65.6, 1516.0], [65.7, 1516.0], [65.8, 1516.0], [65.9, 1516.0], [66.0, 1516.0], [66.1, 1516.0], [66.2, 1516.0], [66.3, 1516.0], [66.4, 1516.0], [66.5, 1516.0], [66.6, 1517.0], [66.7, 1517.0], [66.8, 1517.0], [66.9, 1517.0], [67.0, 1517.0], [67.1, 1517.0], [67.2, 1518.0], [67.3, 1518.0], [67.4, 1518.0], [67.5, 1518.0], [67.6, 1518.0], [67.7, 1518.0], [67.8, 1518.0], [67.9, 1518.0], [68.0, 1518.0], [68.1, 1518.0], [68.2, 1518.0], [68.3, 1518.0], [68.4, 1518.0], [68.5, 1519.0], [68.6, 1519.0], [68.7, 1519.0], [68.8, 1519.0], [68.9, 1519.0], [69.0, 1519.0], [69.1, 1519.0], [69.2, 1520.0], [69.3, 1520.0], [69.4, 1520.0], [69.5, 1520.0], [69.6, 1520.0], [69.7, 1520.0], [69.8, 1520.0], [69.9, 1520.0], [70.0, 1520.0], [70.1, 1520.0], [70.2, 1520.0], [70.3, 1520.0], [70.4, 1520.0], [70.5, 1520.0], [70.6, 1520.0], [70.7, 1520.0], [70.8, 1520.0], [70.9, 1521.0], [71.0, 1521.0], [71.1, 1521.0], [71.2, 1521.0], [71.3, 1521.0], [71.4, 1522.0], [71.5, 1522.0], [71.6, 1522.0], [71.7, 1522.0], [71.8, 1522.0], [71.9, 1522.0], [72.0, 1522.0], [72.1, 1522.0], [72.2, 1523.0], [72.3, 1523.0], [72.4, 1523.0], [72.5, 1523.0], [72.6, 1523.0], [72.7, 1523.0], [72.8, 1523.0], [72.9, 1524.0], [73.0, 1524.0], [73.1, 1524.0], [73.2, 1524.0], [73.3, 1524.0], [73.4, 1524.0], [73.5, 1525.0], [73.6, 1525.0], [73.7, 1525.0], [73.8, 1525.0], [73.9, 1525.0], [74.0, 1526.0], [74.1, 1526.0], [74.2, 1526.0], [74.3, 1526.0], [74.4, 1526.0], [74.5, 1526.0], [74.6, 1528.0], [74.7, 1528.0], [74.8, 1529.0], [74.9, 1529.0], [75.0, 1529.0], [75.1, 1530.0], [75.2, 1530.0], [75.3, 1530.0], [75.4, 1530.0], [75.5, 1531.0], [75.6, 1531.0], [75.7, 1531.0], [75.8, 1531.0], [75.9, 1531.0], [76.0, 1531.0], [76.1, 1532.0], [76.2, 1532.0], [76.3, 1532.0], [76.4, 1532.0], [76.5, 1532.0], [76.6, 1532.0], [76.7, 1532.0], [76.8, 1532.0], [76.9, 1532.0], [77.0, 1532.0], [77.1, 1532.0], [77.2, 1532.0], [77.3, 1532.0], [77.4, 1533.0], [77.5, 1533.0], [77.6, 1533.0], [77.7, 1533.0], [77.8, 1533.0], [77.9, 1535.0], [78.0, 1535.0], [78.1, 1536.0], [78.2, 1536.0], [78.3, 1537.0], [78.4, 1537.0], [78.5, 1537.0], [78.6, 1537.0], [78.7, 1538.0], [78.8, 1538.0], [78.9, 1538.0], [79.0, 1538.0], [79.1, 1538.0], [79.2, 1539.0], [79.3, 1539.0], [79.4, 1539.0], [79.5, 1539.0], [79.6, 1539.0], [79.7, 1539.0], [79.8, 1540.0], [79.9, 1540.0], [80.0, 1540.0], [80.1, 1541.0], [80.2, 1541.0], [80.3, 1541.0], [80.4, 1541.0], [80.5, 1541.0], [80.6, 1541.0], [80.7, 1542.0], [80.8, 1542.0], [80.9, 1542.0], [81.0, 1542.0], [81.1, 1542.0], [81.2, 1542.0], [81.3, 1542.0], [81.4, 1543.0], [81.5, 1543.0], [81.6, 1544.0], [81.7, 1544.0], [81.8, 1545.0], [81.9, 1545.0], [82.0, 1545.0], [82.1, 1545.0], [82.2, 1547.0], [82.3, 1547.0], [82.4, 1549.0], [82.5, 1549.0], [82.6, 1549.0], [82.7, 1549.0], [82.8, 1549.0], [82.9, 1549.0], [83.0, 1549.0], [83.1, 1550.0], [83.2, 1550.0], [83.3, 1550.0], [83.4, 1550.0], [83.5, 1550.0], [83.6, 1550.0], [83.7, 1551.0], [83.8, 1551.0], [83.9, 1551.0], [84.0, 1554.0], [84.1, 1554.0], [84.2, 1555.0], [84.3, 1555.0], [84.4, 1557.0], [84.5, 1557.0], [84.6, 1559.0], [84.7, 1559.0], [84.8, 1559.0], [84.9, 1559.0], [85.0, 1559.0], [85.1, 1559.0], [85.2, 1559.0], [85.3, 1560.0], [85.4, 1560.0], [85.5, 1562.0], [85.6, 1562.0], [85.7, 1562.0], [85.8, 1562.0], [85.9, 1565.0], [86.0, 1565.0], [86.1, 1566.0], [86.2, 1566.0], [86.3, 1566.0], [86.4, 1569.0], [86.5, 1569.0], [86.6, 1573.0], [86.7, 1573.0], [86.8, 1579.0], [86.9, 1579.0], [87.0, 1581.0], [87.1, 1581.0], [87.2, 1581.0], [87.3, 1581.0], [87.4, 1581.0], [87.5, 1581.0], [87.6, 1581.0], [87.7, 1582.0], [87.8, 1582.0], [87.9, 1583.0], [88.0, 1583.0], [88.1, 1584.0], [88.2, 1584.0], [88.3, 1584.0], [88.4, 1584.0], [88.5, 1587.0], [88.6, 1587.0], [88.7, 1587.0], [88.8, 1587.0], [88.9, 1587.0], [89.0, 1590.0], [89.1, 1590.0], [89.2, 1592.0], [89.3, 1592.0], [89.4, 1592.0], [89.5, 1592.0], [89.6, 1594.0], [89.7, 1594.0], [89.8, 1594.0], [89.9, 1594.0], [90.0, 1594.0], [90.1, 1595.0], [90.2, 1595.0], [90.3, 1599.0], [90.4, 1599.0], [90.5, 1600.0], [90.6, 1600.0], [90.7, 1603.0], [90.8, 1603.0], [90.9, 1604.0], [91.0, 1604.0], [91.1, 1607.0], [91.2, 1607.0], [91.3, 1607.0], [91.4, 1612.0], [91.5, 1612.0], [91.6, 1613.0], [91.7, 1613.0], [91.8, 1637.0], [91.9, 1637.0], [92.0, 1637.0], [92.1, 1637.0], [92.2, 1640.0], [92.3, 1640.0], [92.4, 1648.0], [92.5, 1648.0], [92.6, 1648.0], [92.7, 1657.0], [92.8, 1657.0], [92.9, 1663.0], [93.0, 1663.0], [93.1, 1667.0], [93.2, 1667.0], [93.3, 1673.0], [93.4, 1673.0], [93.5, 1677.0], [93.6, 1677.0], [93.7, 1678.0], [93.8, 1678.0], [93.9, 1678.0], [94.0, 1682.0], [94.1, 1682.0], [94.2, 1686.0], [94.3, 1686.0], [94.4, 1689.0], [94.5, 1689.0], [94.6, 1697.0], [94.7, 1697.0], [94.8, 1701.0], [94.9, 1701.0], [95.0, 1701.0], [95.1, 1701.0], [95.2, 1701.0], [95.3, 1703.0], [95.4, 1703.0], [95.5, 1705.0], [95.6, 1705.0], [95.7, 1719.0], [95.8, 1719.0], [95.9, 1721.0], [96.0, 1721.0], [96.1, 1734.0], [96.2, 1734.0], [96.3, 1734.0], [96.4, 1741.0], [96.5, 1741.0], [96.6, 1749.0], [96.7, 1749.0], [96.8, 1762.0], [96.9, 1762.0], [97.0, 1778.0], [97.1, 1778.0], [97.2, 1779.0], [97.3, 1779.0], [97.4, 1779.0], [97.5, 1779.0], [97.6, 1779.0], [97.7, 1779.0], [97.8, 1779.0], [97.9, 1801.0], [98.0, 1801.0], [98.1, 1804.0], [98.2, 1804.0], [98.3, 1817.0], [98.4, 1817.0], [98.5, 1831.0], [98.6, 1831.0], [98.7, 1836.0], [98.8, 1836.0], [98.9, 1836.0], [99.0, 1837.0], [99.1, 1837.0], [99.2, 1872.0], [99.3, 1872.0], [99.4, 1926.0], [99.5, 1926.0], [99.6, 1996.0], [99.7, 1996.0], [99.8, 2066.0], [99.9, 2066.0], [100.0, 2066.0]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 232.0, "series": [{"data": [[1100.0, 10.0], [1200.0, 2.0], [600.0, 94.0], [1300.0, 6.0], [700.0, 232.0], [1400.0, 1.0], [400.0, 29.0], [800.0, 58.0], [900.0, 12.0], [500.0, 25.0], [1000.0, 4.0]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[1100.0, 203.0], [1200.0, 27.0], [1300.0, 8.0], [700.0, 7.0], [1400.0, 1.0], [1500.0, 2.0], [800.0, 23.0], [400.0, 10.0], [1700.0, 1.0], [900.0, 24.0], [1800.0, 1.0], [1000.0, 165.0]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[1100.0, 9.0], [1200.0, 21.0], [1300.0, 22.0], [1400.0, 181.0], [700.0, 8.0], [1500.0, 174.0], [1600.0, 20.0], [800.0, 1.0], [1700.0, 14.0], [1800.0, 7.0], [1900.0, 2.0], [2000.0, 1.0]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 928.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 459.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 928.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.454545454545455, "minX": 1.72743162E12, "maxY": 11.0, "series": [{"data": [[1.72743168E12, 10.454545454545455], [1.72743162E12, 11.0]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[1.72743168E12, 10.540816326530614], [1.72743162E12, 11.0]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[1.72743168E12, 10.618556701030927], [1.72743162E12, 11.0]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72743168E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 482.0, "minX": 1.0, "maxY": 1485.923076923076, "series": [{"data": [[33.0, 746.2597402597406], [8.0, 484.0], [4.0, 485.0], [1.0, 485.0], [10.0, 484.0], [5.0, 484.0], [11.0, 483.5], [3.0, 485.0], [7.0, 484.0]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[32.386892177589864, 740.1649048625798]], "isOverall": false, "label": "conf3-Aggregated", "isController": false}, {"data": [[33.0, 1098.982683982684], [16.0, 482.5], [18.0, 485.0], [19.0, 482.0], [21.0, 486.0], [22.0, 482.5], [13.0, 483.0], [14.0, 484.5]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[32.67161016949153, 1085.9427966101696]], "isOverall": false, "label": "conf2-Aggregated", "isController": false}, {"data": [[33.0, 1485.923076923076], [23.0, 782.0], [25.0, 721.0], [26.0, 782.0], [29.0, 1174.0]], "isOverall": false, "label": "conf1", "isController": false}, {"data": [[32.9195652173913, 1478.8586956521733]], "isOverall": false, "label": "conf1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 33.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 656.7833333333333, "minX": 1.72743162E12, "maxY": 4319.7, "series": [{"data": [[1.72743168E12, 2388.75], [1.72743162E12, 4319.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72743168E12, 656.7833333333333], [1.72743162E12, 2935.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72743168E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 721.4772727272726, "minX": 1.72743162E12, "maxY": 1497.2644628099167, "series": [{"data": [[1.72743168E12, 721.4772727272726], [1.72743162E12, 744.4363636363639]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[1.72743168E12, 1075.0714285714287], [1.72743162E12, 1088.7914438502667]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[1.72743168E12, 1409.9793814432985], [1.72743162E12, 1497.2644628099167]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72743168E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 660.9545454545452, "minX": 1.72743162E12, "maxY": 1497.2396694214863, "series": [{"data": [[1.72743168E12, 660.9545454545452], [1.72743162E12, 744.4051948051949]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[1.72743168E12, 1025.7142857142858], [1.72743162E12, 1088.7673796791448]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[1.72743168E12, 1316.505154639175], [1.72743162E12, 1497.2396694214863]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72743168E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.07012987012987007, "minX": 1.72743162E12, "maxY": 0.24489795918367344, "series": [{"data": [[1.72743168E12, 0.1136363636363636], [1.72743162E12, 0.07012987012987007]], "isOverall": false, "label": "conf3", "isController": false}, {"data": [[1.72743168E12, 0.24489795918367344], [1.72743162E12, 0.16042780748663116]], "isOverall": false, "label": "conf2", "isController": false}, {"data": [[1.72743168E12, 0.10309278350515463], [1.72743162E12, 0.21763085399449048]], "isOverall": false, "label": "conf1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72743168E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 424.0, "minX": 1.72743162E12, "maxY": 929.0, "series": [{"data": [[1.72743168E12, 915.0], [1.72743162E12, 929.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72743168E12, 802.0], [1.72743162E12, 881.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72743168E12, 915.0], [1.72743162E12, 927.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72743168E12, 834.4000000000001], [1.72743162E12, 895.8499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72743168E12, 680.0], [1.72743162E12, 424.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72743168E12, 743.0], [1.72743162E12, 727.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72743168E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 567.0, "minX": 2.0, "maxY": 1579.0, "series": [{"data": [[33.0, 729.0], [32.0, 750.0], [2.0, 802.0], [10.0, 740.0], [11.0, 567.0], [12.0, 856.0], [13.0, 729.0], [14.0, 734.0], [15.0, 703.5], [19.0, 727.0], [20.0, 683.5], [21.0, 709.0], [22.0, 738.0], [23.0, 712.0], [6.0, 723.0], [24.0, 878.0], [26.0, 850.0], [27.0, 732.0], [7.0, 665.5], [29.0, 678.0], [31.0, 838.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 1151.0], [32.0, 1279.0], [2.0, 1346.0], [10.0, 1356.0], [12.0, 1300.0], [13.0, 1503.0], [14.0, 1201.0], [15.0, 1495.0], [16.0, 1176.0], [17.0, 1192.0], [18.0, 1110.5], [19.0, 1579.0], [20.0, 1193.0], [21.0, 1439.0], [22.0, 1452.0], [23.0, 1102.0], [6.0, 1342.0], [24.0, 1346.0], [26.0, 1257.0], [27.0, 1179.0], [7.0, 1367.5], [28.0, 1175.5], [29.0, 1093.5], [31.0, 1308.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 567.0, "minX": 2.0, "maxY": 1579.0, "series": [{"data": [[33.0, 729.0], [32.0, 750.0], [2.0, 802.0], [10.0, 740.0], [11.0, 567.0], [12.0, 856.0], [13.0, 729.0], [14.0, 734.0], [15.0, 703.5], [19.0, 727.0], [20.0, 683.5], [21.0, 709.0], [22.0, 738.0], [23.0, 712.0], [6.0, 723.0], [24.0, 877.0], [26.0, 850.0], [27.0, 732.0], [7.0, 665.5], [29.0, 678.0], [31.0, 838.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 1147.0], [32.0, 1279.0], [2.0, 1346.0], [10.0, 1356.0], [12.0, 1300.0], [13.0, 1503.0], [14.0, 1201.0], [15.0, 1495.0], [16.0, 1176.0], [17.0, 1192.0], [18.0, 1110.5], [19.0, 1579.0], [20.0, 1192.5], [21.0, 1439.0], [22.0, 1452.0], [23.0, 1102.0], [6.0, 1342.0], [24.0, 1346.0], [26.0, 1257.0], [27.0, 1179.0], [7.0, 1367.5], [28.0, 1175.5], [29.0, 1093.5], [31.0, 1308.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.35, "minX": 1.72743162E12, "maxY": 19.066666666666666, "series": [{"data": [[1.72743168E12, 4.35], [1.72743162E12, 19.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72743168E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.72743162E12, "maxY": 18.7, "series": [{"data": [[1.72743168E12, 4.183333333333334], [1.72743162E12, 18.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72743168E12, 0.5333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72743168E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.72743162E12, "maxY": 6.05, "series": [{"data": [[1.72743168E12, 0.21666666666666667], [1.72743162E12, 0.45]], "isOverall": false, "label": "conf3-failure", "isController": false}, {"data": [[1.72743168E12, 1.25], [1.72743162E12, 5.966666666666667]], "isOverall": false, "label": "conf3-success", "isController": false}, {"data": [[1.72743168E12, 1.6333333333333333], [1.72743162E12, 5.5]], "isOverall": false, "label": "conf2-failure", "isController": false}, {"data": [[1.72743162E12, 0.7333333333333333]], "isOverall": false, "label": "conf2-success", "isController": false}, {"data": [[1.72743168E12, 1.6166666666666667], [1.72743162E12, 6.05]], "isOverall": false, "label": "conf1-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72743168E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.25, "minX": 1.72743162E12, "maxY": 12.0, "series": [{"data": [[1.72743168E12, 1.25], [1.72743162E12, 6.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72743168E12, 3.466666666666667], [1.72743162E12, 12.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72743168E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

